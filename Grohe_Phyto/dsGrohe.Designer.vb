'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:4.0.30319.42000
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsGrohe"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsGrohe
    Inherits Global.System.Data.DataSet
    
    Private tabledsContainer As dsContainerDataTable
    
    Private tabledsMaterial As dsMaterialDataTable
    
    Private tabledsPhyto As dsPhytoDataTable
    
    Private tabledsShipments As dsShipmentsDataTable
    
    Private tabledtHSCode As dtHSCodeDataTable
    
    Private tabledtMatCode As dtMatCodeDataTable
    
    Private tablesqlite_sequence As sqlite_sequenceDataTable
    
    Private tableTotal As TotalDataTable
    
    Private relationFK_dsContainer_dsShipments_0 As Global.System.Data.DataRelation
    
    Private relationFK_dsMaterial_dsContainer_1 As Global.System.Data.DataRelation
    
    Private relationFK_dsPhyto_dtHSCode_0 As Global.System.Data.DataRelation
    
    Private relationFK_dtMatCode_dtHSCode_0 As Global.System.Data.DataRelation
    
    Private relationdtMatCode_dsMaterial As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dsContainer")) Is Nothing) Then
                MyBase.Tables.Add(New dsContainerDataTable(ds.Tables("dsContainer")))
            End If
            If (Not (ds.Tables("dsMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New dsMaterialDataTable(ds.Tables("dsMaterial")))
            End If
            If (Not (ds.Tables("dsPhyto")) Is Nothing) Then
                MyBase.Tables.Add(New dsPhytoDataTable(ds.Tables("dsPhyto")))
            End If
            If (Not (ds.Tables("dsShipments")) Is Nothing) Then
                MyBase.Tables.Add(New dsShipmentsDataTable(ds.Tables("dsShipments")))
            End If
            If (Not (ds.Tables("dtHSCode")) Is Nothing) Then
                MyBase.Tables.Add(New dtHSCodeDataTable(ds.Tables("dtHSCode")))
            End If
            If (Not (ds.Tables("dtMatCode")) Is Nothing) Then
                MyBase.Tables.Add(New dtMatCodeDataTable(ds.Tables("dtMatCode")))
            End If
            If (Not (ds.Tables("sqlite_sequence")) Is Nothing) Then
                MyBase.Tables.Add(New sqlite_sequenceDataTable(ds.Tables("sqlite_sequence")))
            End If
            If (Not (ds.Tables("Total")) Is Nothing) Then
                MyBase.Tables.Add(New TotalDataTable(ds.Tables("Total")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dsContainer() As dsContainerDataTable
        Get
            Return Me.tabledsContainer
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dsMaterial() As dsMaterialDataTable
        Get
            Return Me.tabledsMaterial
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dsPhyto() As dsPhytoDataTable
        Get
            Return Me.tabledsPhyto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dsShipments() As dsShipmentsDataTable
        Get
            Return Me.tabledsShipments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtHSCode() As dtHSCodeDataTable
        Get
            Return Me.tabledtHSCode
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtMatCode() As dtMatCodeDataTable
        Get
            Return Me.tabledtMatCode
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sqlite_sequence() As sqlite_sequenceDataTable
        Get
            Return Me.tablesqlite_sequence
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Total() As TotalDataTable
        Get
            Return Me.tableTotal
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsGrohe = CType(MyBase.Clone,dsGrohe)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("dsContainer")) Is Nothing) Then
                MyBase.Tables.Add(New dsContainerDataTable(ds.Tables("dsContainer")))
            End If
            If (Not (ds.Tables("dsMaterial")) Is Nothing) Then
                MyBase.Tables.Add(New dsMaterialDataTable(ds.Tables("dsMaterial")))
            End If
            If (Not (ds.Tables("dsPhyto")) Is Nothing) Then
                MyBase.Tables.Add(New dsPhytoDataTable(ds.Tables("dsPhyto")))
            End If
            If (Not (ds.Tables("dsShipments")) Is Nothing) Then
                MyBase.Tables.Add(New dsShipmentsDataTable(ds.Tables("dsShipments")))
            End If
            If (Not (ds.Tables("dtHSCode")) Is Nothing) Then
                MyBase.Tables.Add(New dtHSCodeDataTable(ds.Tables("dtHSCode")))
            End If
            If (Not (ds.Tables("dtMatCode")) Is Nothing) Then
                MyBase.Tables.Add(New dtMatCodeDataTable(ds.Tables("dtMatCode")))
            End If
            If (Not (ds.Tables("sqlite_sequence")) Is Nothing) Then
                MyBase.Tables.Add(New sqlite_sequenceDataTable(ds.Tables("sqlite_sequence")))
            End If
            If (Not (ds.Tables("Total")) Is Nothing) Then
                MyBase.Tables.Add(New TotalDataTable(ds.Tables("Total")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledsContainer = CType(MyBase.Tables("dsContainer"),dsContainerDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledsContainer) Is Nothing) Then
                Me.tabledsContainer.InitVars
            End If
        End If
        Me.tabledsMaterial = CType(MyBase.Tables("dsMaterial"),dsMaterialDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledsMaterial) Is Nothing) Then
                Me.tabledsMaterial.InitVars
            End If
        End If
        Me.tabledsPhyto = CType(MyBase.Tables("dsPhyto"),dsPhytoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledsPhyto) Is Nothing) Then
                Me.tabledsPhyto.InitVars
            End If
        End If
        Me.tabledsShipments = CType(MyBase.Tables("dsShipments"),dsShipmentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledsShipments) Is Nothing) Then
                Me.tabledsShipments.InitVars
            End If
        End If
        Me.tabledtHSCode = CType(MyBase.Tables("dtHSCode"),dtHSCodeDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtHSCode) Is Nothing) Then
                Me.tabledtHSCode.InitVars
            End If
        End If
        Me.tabledtMatCode = CType(MyBase.Tables("dtMatCode"),dtMatCodeDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtMatCode) Is Nothing) Then
                Me.tabledtMatCode.InitVars
            End If
        End If
        Me.tablesqlite_sequence = CType(MyBase.Tables("sqlite_sequence"),sqlite_sequenceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesqlite_sequence) Is Nothing) Then
                Me.tablesqlite_sequence.InitVars
            End If
        End If
        Me.tableTotal = CType(MyBase.Tables("Total"),TotalDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTotal) Is Nothing) Then
                Me.tableTotal.InitVars
            End If
        End If
        Me.relationFK_dsContainer_dsShipments_0 = Me.Relations("FK_dsContainer_dsShipments_0")
        Me.relationFK_dsMaterial_dsContainer_1 = Me.Relations("FK_dsMaterial_dsContainer_1")
        Me.relationFK_dsPhyto_dtHSCode_0 = Me.Relations("FK_dsPhyto_dtHSCode_0")
        Me.relationFK_dtMatCode_dtHSCode_0 = Me.Relations("FK_dtMatCode_dtHSCode_0")
        Me.relationdtMatCode_dsMaterial = Me.Relations("dtMatCode_dsMaterial")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsGrohe"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsGrohe.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledsContainer = New dsContainerDataTable()
        MyBase.Tables.Add(Me.tabledsContainer)
        Me.tabledsMaterial = New dsMaterialDataTable()
        MyBase.Tables.Add(Me.tabledsMaterial)
        Me.tabledsPhyto = New dsPhytoDataTable()
        MyBase.Tables.Add(Me.tabledsPhyto)
        Me.tabledsShipments = New dsShipmentsDataTable()
        MyBase.Tables.Add(Me.tabledsShipments)
        Me.tabledtHSCode = New dtHSCodeDataTable()
        MyBase.Tables.Add(Me.tabledtHSCode)
        Me.tabledtMatCode = New dtMatCodeDataTable()
        MyBase.Tables.Add(Me.tabledtMatCode)
        Me.tablesqlite_sequence = New sqlite_sequenceDataTable()
        MyBase.Tables.Add(Me.tablesqlite_sequence)
        Me.tableTotal = New TotalDataTable()
        MyBase.Tables.Add(Me.tableTotal)
        Me.relationFK_dsContainer_dsShipments_0 = New Global.System.Data.DataRelation("FK_dsContainer_dsShipments_0", New Global.System.Data.DataColumn() {Me.tabledsShipments.STT_NOColumn}, New Global.System.Data.DataColumn() {Me.tabledsContainer.STT_NoColumn}, false)
        Me.Relations.Add(Me.relationFK_dsContainer_dsShipments_0)
        Me.relationFK_dsMaterial_dsContainer_1 = New Global.System.Data.DataRelation("FK_dsMaterial_dsContainer_1", New Global.System.Data.DataColumn() {Me.tabledsContainer.Container_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledsMaterial.Container_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_dsMaterial_dsContainer_1)
        Me.relationFK_dsPhyto_dtHSCode_0 = New Global.System.Data.DataRelation("FK_dsPhyto_dtHSCode_0", New Global.System.Data.DataColumn() {Me.tabledtHSCode.HS_CodeColumn}, New Global.System.Data.DataColumn() {Me.tabledsPhyto.HS_CodeColumn}, false)
        Me.Relations.Add(Me.relationFK_dsPhyto_dtHSCode_0)
        Me.relationFK_dtMatCode_dtHSCode_0 = New Global.System.Data.DataRelation("FK_dtMatCode_dtHSCode_0", New Global.System.Data.DataColumn() {Me.tabledtHSCode.HS_CodeColumn}, New Global.System.Data.DataColumn() {Me.tabledtMatCode.HS_CodeColumn}, false)
        Me.Relations.Add(Me.relationFK_dtMatCode_dtHSCode_0)
        Me.relationdtMatCode_dsMaterial = New Global.System.Data.DataRelation("dtMatCode_dsMaterial", New Global.System.Data.DataColumn() {Me.tabledtMatCode.Material_IDColumn}, New Global.System.Data.DataColumn() {Me.tabledsMaterial.Material_NoColumn}, false)
        Me.Relations.Add(Me.relationdtMatCode_dsMaterial)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializedsContainer() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializedsMaterial() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializedsPhyto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializedsShipments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializedtHSCode() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializedtMatCode() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializesqlite_sequence() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeTotal() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsGrohe = New dsGrohe()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub dsContainerRowChangeEventHandler(ByVal sender As Object, ByVal e As dsContainerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub dsMaterialRowChangeEventHandler(ByVal sender As Object, ByVal e As dsMaterialRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub dsPhytoRowChangeEventHandler(ByVal sender As Object, ByVal e As dsPhytoRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub dsShipmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As dsShipmentsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub dtHSCodeRowChangeEventHandler(ByVal sender As Object, ByVal e As dtHSCodeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub dtMatCodeRowChangeEventHandler(ByVal sender As Object, ByVal e As dtMatCodeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub sqlite_sequenceRowChangeEventHandler(ByVal sender As Object, ByVal e As sqlite_sequenceRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub TotalRowChangeEventHandler(ByVal sender As Object, ByVal e As TotalRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dsContainerDataTable
        Inherits Global.System.Data.TypedTableBase(Of dsContainerRow)
        
        Private columnContainer_ID As Global.System.Data.DataColumn
        
        Private columnCreated As Global.System.Data.DataColumn
        
        Private columnContainer_No As Global.System.Data.DataColumn
        
        Private columnSTT_No As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dsContainer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Container_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainer_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Container_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainer_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STT_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTT_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dsContainerRow
            Get
                Return CType(Me.Rows(index),dsContainerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsContainerRowChanging As dsContainerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsContainerRowChanged As dsContainerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsContainerRowDeleting As dsContainerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsContainerRowDeleted As dsContainerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AdddsContainerRow(ByVal row As dsContainerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AdddsContainerRow(ByVal Created As Date, ByVal Container_No As String, ByVal parentdsShipmentsRowByFK_dsContainer_dsShipments_0 As dsShipmentsRow) As dsContainerRow
            Dim rowdsContainerRow As dsContainerRow = CType(Me.NewRow,dsContainerRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Created, Container_No, Nothing}
            If (Not (parentdsShipmentsRowByFK_dsContainer_dsShipments_0) Is Nothing) Then
                columnValuesArray(3) = parentdsShipmentsRowByFK_dsContainer_dsShipments_0(0)
            End If
            rowdsContainerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdsContainerRow)
            Return rowdsContainerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByContainer_ID(ByVal Container_ID As Long) As dsContainerRow
            Return CType(Me.Rows.Find(New Object() {Container_ID}),dsContainerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dsContainerDataTable = CType(MyBase.Clone,dsContainerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dsContainerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnContainer_ID = MyBase.Columns("Container_ID")
            Me.columnCreated = MyBase.Columns("Created")
            Me.columnContainer_No = MyBase.Columns("Container_No")
            Me.columnSTT_No = MyBase.Columns("STT_No")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnContainer_ID = New Global.System.Data.DataColumn("Container_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainer_ID)
            Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreated)
            Me.columnContainer_No = New Global.System.Data.DataColumn("Container_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainer_No)
            Me.columnSTT_No = New Global.System.Data.DataColumn("STT_No", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTT_No)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnContainer_ID}, true))
            Me.columnContainer_ID.AutoIncrement = true
            Me.columnContainer_ID.AutoIncrementSeed = 1
            Me.columnContainer_ID.AllowDBNull = false
            Me.columnContainer_ID.Unique = true
            Me.columnCreated.AllowDBNull = false
            Me.columnContainer_No.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewdsContainerRow() As dsContainerRow
            Return CType(Me.NewRow,dsContainerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dsContainerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dsContainerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dsContainerRowChangedEvent) Is Nothing) Then
                RaiseEvent dsContainerRowChanged(Me, New dsContainerRowChangeEvent(CType(e.Row,dsContainerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dsContainerRowChangingEvent) Is Nothing) Then
                RaiseEvent dsContainerRowChanging(Me, New dsContainerRowChangeEvent(CType(e.Row,dsContainerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dsContainerRowDeletedEvent) Is Nothing) Then
                RaiseEvent dsContainerRowDeleted(Me, New dsContainerRowChangeEvent(CType(e.Row,dsContainerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dsContainerRowDeletingEvent) Is Nothing) Then
                RaiseEvent dsContainerRowDeleting(Me, New dsContainerRowChangeEvent(CType(e.Row,dsContainerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovedsContainerRow(ByVal row As dsContainerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsGrohe = New dsGrohe()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dsContainerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dsMaterialDataTable
        Inherits Global.System.Data.TypedTableBase(Of dsMaterialRow)
        
        Private columnMaterial_ID As Global.System.Data.DataColumn
        
        Private columnCreated As Global.System.Data.DataColumn
        
        Private columnContainer_ID As Global.System.Data.DataColumn
        
        Private columnMaterial_No As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dsMaterial"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Material_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Container_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainer_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Material_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dsMaterialRow
            Get
                Return CType(Me.Rows(index),dsMaterialRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsMaterialRowChanging As dsMaterialRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsMaterialRowChanged As dsMaterialRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsMaterialRowDeleting As dsMaterialRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsMaterialRowDeleted As dsMaterialRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AdddsMaterialRow(ByVal row As dsMaterialRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AdddsMaterialRow(ByVal Created As Date, ByVal parentdsContainerRowByFK_dsMaterial_dsContainer_1 As dsContainerRow, ByVal parentdtMatCodeRowBydtMatCode_dsMaterial As dtMatCodeRow) As dsMaterialRow
            Dim rowdsMaterialRow As dsMaterialRow = CType(Me.NewRow,dsMaterialRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Created, Nothing, Nothing}
            If (Not (parentdsContainerRowByFK_dsMaterial_dsContainer_1) Is Nothing) Then
                columnValuesArray(2) = parentdsContainerRowByFK_dsMaterial_dsContainer_1(0)
            End If
            If (Not (parentdtMatCodeRowBydtMatCode_dsMaterial) Is Nothing) Then
                columnValuesArray(3) = parentdtMatCodeRowBydtMatCode_dsMaterial(0)
            End If
            rowdsMaterialRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdsMaterialRow)
            Return rowdsMaterialRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByMaterial_ID(ByVal Material_ID As Long) As dsMaterialRow
            Return CType(Me.Rows.Find(New Object() {Material_ID}),dsMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dsMaterialDataTable = CType(MyBase.Clone,dsMaterialDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dsMaterialDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMaterial_ID = MyBase.Columns("Material_ID")
            Me.columnCreated = MyBase.Columns("Created")
            Me.columnContainer_ID = MyBase.Columns("Container_ID")
            Me.columnMaterial_No = MyBase.Columns("Material_No")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMaterial_ID = New Global.System.Data.DataColumn("Material_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_ID)
            Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreated)
            Me.columnContainer_ID = New Global.System.Data.DataColumn("Container_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainer_ID)
            Me.columnMaterial_No = New Global.System.Data.DataColumn("Material_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_No)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMaterial_ID}, true))
            Me.columnMaterial_ID.AutoIncrement = true
            Me.columnMaterial_ID.AutoIncrementSeed = 1
            Me.columnMaterial_ID.AllowDBNull = false
            Me.columnMaterial_ID.Unique = true
            Me.columnCreated.AllowDBNull = false
            Me.columnContainer_ID.AllowDBNull = false
            Me.columnMaterial_No.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewdsMaterialRow() As dsMaterialRow
            Return CType(Me.NewRow,dsMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dsMaterialRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dsMaterialRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dsMaterialRowChangedEvent) Is Nothing) Then
                RaiseEvent dsMaterialRowChanged(Me, New dsMaterialRowChangeEvent(CType(e.Row,dsMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dsMaterialRowChangingEvent) Is Nothing) Then
                RaiseEvent dsMaterialRowChanging(Me, New dsMaterialRowChangeEvent(CType(e.Row,dsMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dsMaterialRowDeletedEvent) Is Nothing) Then
                RaiseEvent dsMaterialRowDeleted(Me, New dsMaterialRowChangeEvent(CType(e.Row,dsMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dsMaterialRowDeletingEvent) Is Nothing) Then
                RaiseEvent dsMaterialRowDeleting(Me, New dsMaterialRowChangeEvent(CType(e.Row,dsMaterialRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovedsMaterialRow(ByVal row As dsMaterialRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsGrohe = New dsGrohe()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dsMaterialDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dsPhytoDataTable
        Inherits Global.System.Data.TypedTableBase(Of dsPhytoRow)
        
        Private columnPhyto_ID As Global.System.Data.DataColumn
        
        Private columnCreated As Global.System.Data.DataColumn
        
        Private columnHS_Code As Global.System.Data.DataColumn
        
        Private columnOrigin As Global.System.Data.DataColumn
        
        Private columnreqModel99 As Global.System.Data.DataColumn
        
        Private columnreqPhytoDE As Global.System.Data.DataColumn
        
        Private columnchklatest As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dsPhyto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Phyto_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhyto_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HS_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHS_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OriginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property reqModel99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnreqModel99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property reqPhytoDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreqPhytoDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property chklatestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchklatest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dsPhytoRow
            Get
                Return CType(Me.Rows(index),dsPhytoRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsPhytoRowChanging As dsPhytoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsPhytoRowChanged As dsPhytoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsPhytoRowDeleting As dsPhytoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsPhytoRowDeleted As dsPhytoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AdddsPhytoRow(ByVal row As dsPhytoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AdddsPhytoRow(ByVal Created As Date, ByVal parentdtHSCodeRowByFK_dsPhyto_dtHSCode_0 As dtHSCodeRow, ByVal Origin As String, ByVal reqModel99 As Boolean, ByVal reqPhytoDE As Boolean, ByVal chklatest As Date) As dsPhytoRow
            Dim rowdsPhytoRow As dsPhytoRow = CType(Me.NewRow,dsPhytoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Created, Nothing, Origin, reqModel99, reqPhytoDE, chklatest}
            If (Not (parentdtHSCodeRowByFK_dsPhyto_dtHSCode_0) Is Nothing) Then
                columnValuesArray(2) = parentdtHSCodeRowByFK_dsPhyto_dtHSCode_0(0)
            End If
            rowdsPhytoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdsPhytoRow)
            Return rowdsPhytoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByPhyto_ID(ByVal Phyto_ID As Long) As dsPhytoRow
            Return CType(Me.Rows.Find(New Object() {Phyto_ID}),dsPhytoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dsPhytoDataTable = CType(MyBase.Clone,dsPhytoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dsPhytoDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPhyto_ID = MyBase.Columns("Phyto_ID")
            Me.columnCreated = MyBase.Columns("Created")
            Me.columnHS_Code = MyBase.Columns("HS_Code")
            Me.columnOrigin = MyBase.Columns("Origin")
            Me.columnreqModel99 = MyBase.Columns("reqModel99")
            Me.columnreqPhytoDE = MyBase.Columns("reqPhytoDE")
            Me.columnchklatest = MyBase.Columns("chklatest")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPhyto_ID = New Global.System.Data.DataColumn("Phyto_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhyto_ID)
            Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreated)
            Me.columnHS_Code = New Global.System.Data.DataColumn("HS_Code", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHS_Code)
            Me.columnOrigin = New Global.System.Data.DataColumn("Origin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigin)
            Me.columnreqModel99 = New Global.System.Data.DataColumn("reqModel99", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreqModel99)
            Me.columnreqPhytoDE = New Global.System.Data.DataColumn("reqPhytoDE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreqPhytoDE)
            Me.columnchklatest = New Global.System.Data.DataColumn("chklatest", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchklatest)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPhyto_ID}, true))
            Me.columnPhyto_ID.AutoIncrement = true
            Me.columnPhyto_ID.AutoIncrementSeed = 1
            Me.columnPhyto_ID.AllowDBNull = false
            Me.columnPhyto_ID.Unique = true
            Me.columnCreated.AllowDBNull = false
            Me.columnHS_Code.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewdsPhytoRow() As dsPhytoRow
            Return CType(Me.NewRow,dsPhytoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dsPhytoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dsPhytoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dsPhytoRowChangedEvent) Is Nothing) Then
                RaiseEvent dsPhytoRowChanged(Me, New dsPhytoRowChangeEvent(CType(e.Row,dsPhytoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dsPhytoRowChangingEvent) Is Nothing) Then
                RaiseEvent dsPhytoRowChanging(Me, New dsPhytoRowChangeEvent(CType(e.Row,dsPhytoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dsPhytoRowDeletedEvent) Is Nothing) Then
                RaiseEvent dsPhytoRowDeleted(Me, New dsPhytoRowChangeEvent(CType(e.Row,dsPhytoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dsPhytoRowDeletingEvent) Is Nothing) Then
                RaiseEvent dsPhytoRowDeleting(Me, New dsPhytoRowChangeEvent(CType(e.Row,dsPhytoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovedsPhytoRow(ByVal row As dsPhytoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsGrohe = New dsGrohe()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dsPhytoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dsShipmentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of dsShipmentsRow)
        
        Private columnSTT_NO As Global.System.Data.DataColumn
        
        Private columnCreated As Global.System.Data.DataColumn
        
        Private columnArchive_No As Global.System.Data.DataColumn
        
        Private columnHBL As Global.System.Data.DataColumn
        
        Private columnMBL As Global.System.Data.DataColumn
        
        Private columnPOL As Global.System.Data.DataColumn
        
        Private columnPOD As Global.System.Data.DataColumn
        
        Private columnOrigin As Global.System.Data.DataColumn
        
        Private columnETD As Global.System.Data.DataColumn
        
        Private columnETA As Global.System.Data.DataColumn
        
        Private columnPieces As Global.System.Data.DataColumn
        
        Private columnWeight As Global.System.Data.DataColumn
        
        Private columnVolume As Global.System.Data.DataColumn
        
        Private columnPrincipal As Global.System.Data.DataColumn
        
        Private columnShipper As Global.System.Data.DataColumn
        
        Private columnConsignee As Global.System.Data.DataColumn
        
        Private columnchkPhytoDone As Global.System.Data.DataColumn
        
        Private columnreqNL As Global.System.Data.DataColumn
        
        Private columnreqDE As Global.System.Data.DataColumn
        
        Private columnchkNL As Global.System.Data.DataColumn
        
        Private columnchkDE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dsShipments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Archive_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArchive_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HBLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHBL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property MBLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMBL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property POLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OriginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ETDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnETD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ETAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnETA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PiecesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPieces
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property WeightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property VolumeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVolume
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property PrincipalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrincipal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ShipperColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipper
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ConsigneeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsignee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property chkPhytoDoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkPhytoDone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property reqNLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreqNL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property reqDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreqDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property chkNLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkNL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property chkDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dsShipmentsRow
            Get
                Return CType(Me.Rows(index),dsShipmentsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsShipmentsRowChanging As dsShipmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsShipmentsRowChanged As dsShipmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsShipmentsRowDeleting As dsShipmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dsShipmentsRowDeleted As dsShipmentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AdddsShipmentsRow(ByVal row As dsShipmentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AdddsShipmentsRow( _
                    ByVal STT_NO As Long,  _
                    ByVal Created As Date,  _
                    ByVal Archive_No As String,  _
                    ByVal HBL As String,  _
                    ByVal MBL As String,  _
                    ByVal POL As String,  _
                    ByVal POD As String,  _
                    ByVal Origin As String,  _
                    ByVal ETD As Date,  _
                    ByVal ETA As Date,  _
                    ByVal Pieces As Long,  _
                    ByVal Weight As Double,  _
                    ByVal Volume As Double,  _
                    ByVal Principal As String,  _
                    ByVal Shipper As String,  _
                    ByVal Consignee As String,  _
                    ByVal chkPhytoDone As Boolean,  _
                    ByVal reqNL As Boolean,  _
                    ByVal reqDE As Boolean,  _
                    ByVal chkNL As Boolean,  _
                    ByVal chkDE As Boolean) As dsShipmentsRow
            Dim rowdsShipmentsRow As dsShipmentsRow = CType(Me.NewRow,dsShipmentsRow)
            Dim columnValuesArray() As Object = New Object() {STT_NO, Created, Archive_No, HBL, MBL, POL, POD, Origin, ETD, ETA, Pieces, Weight, Volume, Principal, Shipper, Consignee, chkPhytoDone, reqNL, reqDE, chkNL, chkDE}
            rowdsShipmentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdsShipmentsRow)
            Return rowdsShipmentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBySTT_NO(ByVal STT_NO As Long) As dsShipmentsRow
            Return CType(Me.Rows.Find(New Object() {STT_NO}),dsShipmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dsShipmentsDataTable = CType(MyBase.Clone,dsShipmentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dsShipmentsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSTT_NO = MyBase.Columns("STT_NO")
            Me.columnCreated = MyBase.Columns("Created")
            Me.columnArchive_No = MyBase.Columns("Archive_No")
            Me.columnHBL = MyBase.Columns("HBL")
            Me.columnMBL = MyBase.Columns("MBL")
            Me.columnPOL = MyBase.Columns("POL")
            Me.columnPOD = MyBase.Columns("POD")
            Me.columnOrigin = MyBase.Columns("Origin")
            Me.columnETD = MyBase.Columns("ETD")
            Me.columnETA = MyBase.Columns("ETA")
            Me.columnPieces = MyBase.Columns("Pieces")
            Me.columnWeight = MyBase.Columns("Weight")
            Me.columnVolume = MyBase.Columns("Volume")
            Me.columnPrincipal = MyBase.Columns("Principal")
            Me.columnShipper = MyBase.Columns("Shipper")
            Me.columnConsignee = MyBase.Columns("Consignee")
            Me.columnchkPhytoDone = MyBase.Columns("chkPhytoDone")
            Me.columnreqNL = MyBase.Columns("reqNL")
            Me.columnreqDE = MyBase.Columns("reqDE")
            Me.columnchkNL = MyBase.Columns("chkNL")
            Me.columnchkDE = MyBase.Columns("chkDE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSTT_NO = New Global.System.Data.DataColumn("STT_NO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTT_NO)
            Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreated)
            Me.columnArchive_No = New Global.System.Data.DataColumn("Archive_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArchive_No)
            Me.columnHBL = New Global.System.Data.DataColumn("HBL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHBL)
            Me.columnMBL = New Global.System.Data.DataColumn("MBL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMBL)
            Me.columnPOL = New Global.System.Data.DataColumn("POL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL)
            Me.columnPOD = New Global.System.Data.DataColumn("POD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD)
            Me.columnOrigin = New Global.System.Data.DataColumn("Origin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigin)
            Me.columnETD = New Global.System.Data.DataColumn("ETD", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnETD)
            Me.columnETA = New Global.System.Data.DataColumn("ETA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnETA)
            Me.columnPieces = New Global.System.Data.DataColumn("Pieces", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPieces)
            Me.columnWeight = New Global.System.Data.DataColumn("Weight", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeight)
            Me.columnVolume = New Global.System.Data.DataColumn("Volume", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVolume)
            Me.columnPrincipal = New Global.System.Data.DataColumn("Principal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrincipal)
            Me.columnShipper = New Global.System.Data.DataColumn("Shipper", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipper)
            Me.columnConsignee = New Global.System.Data.DataColumn("Consignee", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsignee)
            Me.columnchkPhytoDone = New Global.System.Data.DataColumn("chkPhytoDone", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkPhytoDone)
            Me.columnreqNL = New Global.System.Data.DataColumn("reqNL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreqNL)
            Me.columnreqDE = New Global.System.Data.DataColumn("reqDE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreqDE)
            Me.columnchkNL = New Global.System.Data.DataColumn("chkNL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkNL)
            Me.columnchkDE = New Global.System.Data.DataColumn("chkDE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkDE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTT_NO}, true))
            Me.columnSTT_NO.AllowDBNull = false
            Me.columnSTT_NO.Unique = true
            Me.columnCreated.AllowDBNull = false
            Me.columnchkPhytoDone.AllowDBNull = false
            Me.columnreqNL.AllowDBNull = false
            Me.columnreqDE.AllowDBNull = false
            Me.columnchkNL.AllowDBNull = false
            Me.columnchkDE.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewdsShipmentsRow() As dsShipmentsRow
            Return CType(Me.NewRow,dsShipmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dsShipmentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dsShipmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dsShipmentsRowChangedEvent) Is Nothing) Then
                RaiseEvent dsShipmentsRowChanged(Me, New dsShipmentsRowChangeEvent(CType(e.Row,dsShipmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dsShipmentsRowChangingEvent) Is Nothing) Then
                RaiseEvent dsShipmentsRowChanging(Me, New dsShipmentsRowChangeEvent(CType(e.Row,dsShipmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dsShipmentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent dsShipmentsRowDeleted(Me, New dsShipmentsRowChangeEvent(CType(e.Row,dsShipmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dsShipmentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent dsShipmentsRowDeleting(Me, New dsShipmentsRowChangeEvent(CType(e.Row,dsShipmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovedsShipmentsRow(ByVal row As dsShipmentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsGrohe = New dsGrohe()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dsShipmentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtHSCodeDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtHSCodeRow)
        
        Private columnHS_Code As Global.System.Data.DataColumn
        
        Private columnCreated As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtHSCode"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HS_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHS_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtHSCodeRow
            Get
                Return CType(Me.Rows(index),dtHSCodeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dtHSCodeRowChanging As dtHSCodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dtHSCodeRowChanged As dtHSCodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dtHSCodeRowDeleting As dtHSCodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dtHSCodeRowDeleted As dtHSCodeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AdddtHSCodeRow(ByVal row As dtHSCodeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AdddtHSCodeRow(ByVal HS_Code As Long, ByVal Created As Date) As dtHSCodeRow
            Dim rowdtHSCodeRow As dtHSCodeRow = CType(Me.NewRow,dtHSCodeRow)
            Dim columnValuesArray() As Object = New Object() {HS_Code, Created}
            rowdtHSCodeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtHSCodeRow)
            Return rowdtHSCodeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByHS_Code(ByVal HS_Code As Long) As dtHSCodeRow
            Return CType(Me.Rows.Find(New Object() {HS_Code}),dtHSCodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtHSCodeDataTable = CType(MyBase.Clone,dtHSCodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtHSCodeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnHS_Code = MyBase.Columns("HS_Code")
            Me.columnCreated = MyBase.Columns("Created")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnHS_Code = New Global.System.Data.DataColumn("HS_Code", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHS_Code)
            Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreated)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnHS_Code}, true))
            Me.columnHS_Code.AllowDBNull = false
            Me.columnHS_Code.Unique = true
            Me.columnCreated.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewdtHSCodeRow() As dtHSCodeRow
            Return CType(Me.NewRow,dtHSCodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtHSCodeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtHSCodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtHSCodeRowChangedEvent) Is Nothing) Then
                RaiseEvent dtHSCodeRowChanged(Me, New dtHSCodeRowChangeEvent(CType(e.Row,dtHSCodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtHSCodeRowChangingEvent) Is Nothing) Then
                RaiseEvent dtHSCodeRowChanging(Me, New dtHSCodeRowChangeEvent(CType(e.Row,dtHSCodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtHSCodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtHSCodeRowDeleted(Me, New dtHSCodeRowChangeEvent(CType(e.Row,dtHSCodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtHSCodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtHSCodeRowDeleting(Me, New dtHSCodeRowChangeEvent(CType(e.Row,dtHSCodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovedtHSCodeRow(ByVal row As dtHSCodeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsGrohe = New dsGrohe()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtHSCodeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtMatCodeDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtMatCodeRow)
        
        Private columnMaterial_ID As Global.System.Data.DataColumn
        
        Private columnCreated As Global.System.Data.DataColumn
        
        Private columnHS_Code As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtMatCode"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Material_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HS_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHS_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtMatCodeRow
            Get
                Return CType(Me.Rows(index),dtMatCodeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dtMatCodeRowChanging As dtMatCodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dtMatCodeRowChanged As dtMatCodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dtMatCodeRowDeleting As dtMatCodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event dtMatCodeRowDeleted As dtMatCodeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AdddtMatCodeRow(ByVal row As dtMatCodeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AdddtMatCodeRow(ByVal Material_ID As String, ByVal Created As Date, ByVal parentdtHSCodeRowByFK_dtMatCode_dtHSCode_0 As dtHSCodeRow, ByVal Description As String) As dtMatCodeRow
            Dim rowdtMatCodeRow As dtMatCodeRow = CType(Me.NewRow,dtMatCodeRow)
            Dim columnValuesArray() As Object = New Object() {Material_ID, Created, Nothing, Description}
            If (Not (parentdtHSCodeRowByFK_dtMatCode_dtHSCode_0) Is Nothing) Then
                columnValuesArray(2) = parentdtHSCodeRowByFK_dtMatCode_dtHSCode_0(0)
            End If
            rowdtMatCodeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtMatCodeRow)
            Return rowdtMatCodeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByMaterial_ID(ByVal Material_ID As String) As dtMatCodeRow
            Return CType(Me.Rows.Find(New Object() {Material_ID}),dtMatCodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtMatCodeDataTable = CType(MyBase.Clone,dtMatCodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtMatCodeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMaterial_ID = MyBase.Columns("Material_ID")
            Me.columnCreated = MyBase.Columns("Created")
            Me.columnHS_Code = MyBase.Columns("HS_Code")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMaterial_ID = New Global.System.Data.DataColumn("Material_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_ID)
            Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreated)
            Me.columnHS_Code = New Global.System.Data.DataColumn("HS_Code", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHS_Code)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMaterial_ID}, true))
            Me.columnMaterial_ID.AllowDBNull = false
            Me.columnMaterial_ID.Unique = true
            Me.columnCreated.AllowDBNull = false
            Me.columnHS_Code.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewdtMatCodeRow() As dtMatCodeRow
            Return CType(Me.NewRow,dtMatCodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtMatCodeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtMatCodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtMatCodeRowChangedEvent) Is Nothing) Then
                RaiseEvent dtMatCodeRowChanged(Me, New dtMatCodeRowChangeEvent(CType(e.Row,dtMatCodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtMatCodeRowChangingEvent) Is Nothing) Then
                RaiseEvent dtMatCodeRowChanging(Me, New dtMatCodeRowChangeEvent(CType(e.Row,dtMatCodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtMatCodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtMatCodeRowDeleted(Me, New dtMatCodeRowChangeEvent(CType(e.Row,dtMatCodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtMatCodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtMatCodeRowDeleting(Me, New dtMatCodeRowChangeEvent(CType(e.Row,dtMatCodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovedtMatCodeRow(ByVal row As dtMatCodeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsGrohe = New dsGrohe()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtMatCodeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sqlite_sequenceDataTable
        Inherits Global.System.Data.TypedTableBase(Of sqlite_sequenceRow)
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnseq As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sqlite_sequence"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property seqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sqlite_sequenceRow
            Get
                Return CType(Me.Rows(index),sqlite_sequenceRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event sqlite_sequenceRowChanging As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event sqlite_sequenceRowChanged As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event sqlite_sequenceRowDeleting As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event sqlite_sequenceRowDeleted As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addsqlite_sequenceRow(ByVal row As sqlite_sequenceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addsqlite_sequenceRow(ByVal name As String, ByVal seq As String) As sqlite_sequenceRow
            Dim rowsqlite_sequenceRow As sqlite_sequenceRow = CType(Me.NewRow,sqlite_sequenceRow)
            Dim columnValuesArray() As Object = New Object() {name, seq}
            rowsqlite_sequenceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsqlite_sequenceRow)
            Return rowsqlite_sequenceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sqlite_sequenceDataTable = CType(MyBase.Clone,sqlite_sequenceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sqlite_sequenceDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnname = MyBase.Columns("name")
            Me.columnseq = MyBase.Columns("seq")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnseq = New Global.System.Data.DataColumn("seq", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseq)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newsqlite_sequenceRow() As sqlite_sequenceRow
            Return CType(Me.NewRow,sqlite_sequenceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sqlite_sequenceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sqlite_sequenceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sqlite_sequenceRowChangedEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowChanged(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sqlite_sequenceRowChangingEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowChanging(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sqlite_sequenceRowDeletedEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowDeleted(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sqlite_sequenceRowDeletingEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowDeleting(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removesqlite_sequenceRow(ByVal row As sqlite_sequenceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsGrohe = New dsGrohe()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sqlite_sequenceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TotalDataTable
        Inherits Global.System.Data.TypedTableBase(Of TotalRow)
        
        Private columnSTT_NO As Global.System.Data.DataColumn
        
        Private columnArchive_No As Global.System.Data.DataColumn
        
        Private columnOrigin As Global.System.Data.DataColumn
        
        Private columnMaterial_ID As Global.System.Data.DataColumn
        
        Private columnMaterial_No As Global.System.Data.DataColumn
        
        Private columnHS_Code As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnContainer_No As Global.System.Data.DataColumn
        
        Private columnchkPhytoDone As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Total"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property STT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Archive_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArchive_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property OriginColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrigin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Material_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Material_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property HS_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHS_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Container_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainer_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property chkPhytoDoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkPhytoDone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TotalRow
            Get
                Return CType(Me.Rows(index),TotalRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event TotalRowChanging As TotalRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event TotalRowChanged As TotalRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event TotalRowDeleting As TotalRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event TotalRowDeleted As TotalRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddTotalRow(ByVal row As TotalRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddTotalRow(ByVal STT_NO As Long, ByVal Archive_No As String, ByVal Origin As String, ByVal Material_ID As Long, ByVal Material_No As String, ByVal HS_Code As Long, ByVal Description As String, ByVal Container_No As String, ByVal chkPhytoDone As Boolean) As TotalRow
            Dim rowTotalRow As TotalRow = CType(Me.NewRow,TotalRow)
            Dim columnValuesArray() As Object = New Object() {STT_NO, Archive_No, Origin, Material_ID, Material_No, HS_Code, Description, Container_No, chkPhytoDone}
            rowTotalRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTotalRow)
            Return rowTotalRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindBySTT_NOMaterial_ID(ByVal STT_NO As Long, ByVal Material_ID As Long) As TotalRow
            Return CType(Me.Rows.Find(New Object() {STT_NO, Material_ID}),TotalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TotalDataTable = CType(MyBase.Clone,TotalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TotalDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSTT_NO = MyBase.Columns("STT_NO")
            Me.columnArchive_No = MyBase.Columns("Archive_No")
            Me.columnOrigin = MyBase.Columns("Origin")
            Me.columnMaterial_ID = MyBase.Columns("Material_ID")
            Me.columnMaterial_No = MyBase.Columns("Material_No")
            Me.columnHS_Code = MyBase.Columns("HS_Code")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnContainer_No = MyBase.Columns("Container_No")
            Me.columnchkPhytoDone = MyBase.Columns("chkPhytoDone")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSTT_NO = New Global.System.Data.DataColumn("STT_NO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTT_NO)
            Me.columnArchive_No = New Global.System.Data.DataColumn("Archive_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArchive_No)
            Me.columnOrigin = New Global.System.Data.DataColumn("Origin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigin)
            Me.columnMaterial_ID = New Global.System.Data.DataColumn("Material_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_ID)
            Me.columnMaterial_No = New Global.System.Data.DataColumn("Material_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_No)
            Me.columnHS_Code = New Global.System.Data.DataColumn("HS_Code", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHS_Code)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnContainer_No = New Global.System.Data.DataColumn("Container_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainer_No)
            Me.columnchkPhytoDone = New Global.System.Data.DataColumn("chkPhytoDone", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkPhytoDone)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTT_NO, Me.columnMaterial_ID}, true))
            Me.columnSTT_NO.AllowDBNull = false
            Me.columnMaterial_ID.AllowDBNull = false
            Me.columnMaterial_No.AllowDBNull = false
            Me.columnHS_Code.AllowDBNull = false
            Me.columnContainer_No.AllowDBNull = false
            Me.columnchkPhytoDone.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewTotalRow() As TotalRow
            Return CType(Me.NewRow,TotalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TotalRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TotalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TotalRowChangedEvent) Is Nothing) Then
                RaiseEvent TotalRowChanged(Me, New TotalRowChangeEvent(CType(e.Row,TotalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TotalRowChangingEvent) Is Nothing) Then
                RaiseEvent TotalRowChanging(Me, New TotalRowChangeEvent(CType(e.Row,TotalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TotalRowDeletedEvent) Is Nothing) Then
                RaiseEvent TotalRowDeleted(Me, New TotalRowChangeEvent(CType(e.Row,TotalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TotalRowDeletingEvent) Is Nothing) Then
                RaiseEvent TotalRowDeleting(Me, New TotalRowChangeEvent(CType(e.Row,TotalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveTotalRow(ByVal row As TotalRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsGrohe = New dsGrohe()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TotalDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dsContainerRow
        Inherits Global.System.Data.DataRow
        
        Private tabledsContainer As dsContainerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledsContainer = CType(Me.Table,dsContainerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Container_ID() As Long
            Get
                Return CType(Me(Me.tabledsContainer.Container_IDColumn),Long)
            End Get
            Set
                Me(Me.tabledsContainer.Container_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Created() As Date
            Get
                Return CType(Me(Me.tabledsContainer.CreatedColumn),Date)
            End Get
            Set
                Me(Me.tabledsContainer.CreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Container_No() As String
            Get
                Return CType(Me(Me.tabledsContainer.Container_NoColumn),String)
            End Get
            Set
                Me(Me.tabledsContainer.Container_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STT_No() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledsContainer.STT_NoColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte STT_No in Tabelle dsContainer ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsContainer.STT_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dsShipmentsRow() As dsShipmentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_dsContainer_dsShipments_0")),dsShipmentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_dsContainer_dsShipments_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsSTT_NoNull() As Boolean
            Return Me.IsNull(Me.tabledsContainer.STT_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetSTT_NoNull()
            Me(Me.tabledsContainer.STT_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GetdsMaterialRows() As dsMaterialRow()
            If (Me.Table.ChildRelations("FK_dsMaterial_dsContainer_1") Is Nothing) Then
                Return New dsMaterialRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_dsMaterial_dsContainer_1")),dsMaterialRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dsMaterialRow
        Inherits Global.System.Data.DataRow
        
        Private tabledsMaterial As dsMaterialDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledsMaterial = CType(Me.Table,dsMaterialDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Material_ID() As Long
            Get
                Return CType(Me(Me.tabledsMaterial.Material_IDColumn),Long)
            End Get
            Set
                Me(Me.tabledsMaterial.Material_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Created() As Date
            Get
                Return CType(Me(Me.tabledsMaterial.CreatedColumn),Date)
            End Get
            Set
                Me(Me.tabledsMaterial.CreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Container_ID() As Long
            Get
                Return CType(Me(Me.tabledsMaterial.Container_IDColumn),Long)
            End Get
            Set
                Me(Me.tabledsMaterial.Container_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Material_No() As String
            Get
                Return CType(Me(Me.tabledsMaterial.Material_NoColumn),String)
            End Get
            Set
                Me(Me.tabledsMaterial.Material_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dsContainerRow() As dsContainerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_dsMaterial_dsContainer_1")),dsContainerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_dsMaterial_dsContainer_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtMatCodeRow() As dtMatCodeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("dtMatCode_dsMaterial")),dtMatCodeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("dtMatCode_dsMaterial"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dsPhytoRow
        Inherits Global.System.Data.DataRow
        
        Private tabledsPhyto As dsPhytoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledsPhyto = CType(Me.Table,dsPhytoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Phyto_ID() As Long
            Get
                Return CType(Me(Me.tabledsPhyto.Phyto_IDColumn),Long)
            End Get
            Set
                Me(Me.tabledsPhyto.Phyto_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Created() As Date
            Get
                Return CType(Me(Me.tabledsPhyto.CreatedColumn),Date)
            End Get
            Set
                Me(Me.tabledsPhyto.CreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HS_Code() As Long
            Get
                Return CType(Me(Me.tabledsPhyto.HS_CodeColumn),Long)
            End Get
            Set
                Me(Me.tabledsPhyto.HS_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Origin() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsPhyto.OriginColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Origin in Tabelle dsPhyto ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsPhyto.OriginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property reqModel99() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabledsPhyto.reqModel99Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte reqModel99 in Tabelle dsPhyto ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsPhyto.reqModel99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property reqPhytoDE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabledsPhyto.reqPhytoDEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte reqPhytoDE in Tabelle dsPhyto ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsPhyto.reqPhytoDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property chklatest() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledsPhyto.chklatestColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte chklatest in Tabelle dsPhyto ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsPhyto.chklatestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtHSCodeRow() As dtHSCodeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_dsPhyto_dtHSCode_0")),dtHSCodeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_dsPhyto_dtHSCode_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOriginNull() As Boolean
            Return Me.IsNull(Me.tabledsPhyto.OriginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOriginNull()
            Me(Me.tabledsPhyto.OriginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsreqModel99Null() As Boolean
            Return Me.IsNull(Me.tabledsPhyto.reqModel99Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetreqModel99Null()
            Me(Me.tabledsPhyto.reqModel99Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsreqPhytoDENull() As Boolean
            Return Me.IsNull(Me.tabledsPhyto.reqPhytoDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetreqPhytoDENull()
            Me(Me.tabledsPhyto.reqPhytoDEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IschklatestNull() As Boolean
            Return Me.IsNull(Me.tabledsPhyto.chklatestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetchklatestNull()
            Me(Me.tabledsPhyto.chklatestColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dsShipmentsRow
        Inherits Global.System.Data.DataRow
        
        Private tabledsShipments As dsShipmentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledsShipments = CType(Me.Table,dsShipmentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STT_NO() As Long
            Get
                Return CType(Me(Me.tabledsShipments.STT_NOColumn),Long)
            End Get
            Set
                Me(Me.tabledsShipments.STT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Created() As Date
            Get
                Return CType(Me(Me.tabledsShipments.CreatedColumn),Date)
            End Get
            Set
                Me(Me.tabledsShipments.CreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Archive_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.Archive_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Archive_No in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.Archive_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HBL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.HBLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte HBL in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.HBLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property MBL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.MBLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte MBL in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.MBLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property POL() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.POLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte POL in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.POLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property POD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.PODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte POD in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.PODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Origin() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.OriginColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Origin in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.OriginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ETD() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.ETDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte ETD in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.ETDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ETA() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.ETAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte ETA in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.ETAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Pieces() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.PiecesColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Pieces in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.PiecesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Weight() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.WeightColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Weight in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.WeightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Volume() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.VolumeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Volume in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.VolumeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Principal() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.PrincipalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Principal in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.PrincipalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Shipper() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.ShipperColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Shipper in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.ShipperColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Consignee() As String
            Get
                Try 
                    Return CType(Me(Me.tabledsShipments.ConsigneeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Consignee in Tabelle dsShipments ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledsShipments.ConsigneeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property chkPhytoDone() As Boolean
            Get
                Return CType(Me(Me.tabledsShipments.chkPhytoDoneColumn),Boolean)
            End Get
            Set
                Me(Me.tabledsShipments.chkPhytoDoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property reqNL() As Boolean
            Get
                Return CType(Me(Me.tabledsShipments.reqNLColumn),Boolean)
            End Get
            Set
                Me(Me.tabledsShipments.reqNLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property reqDE() As Boolean
            Get
                Return CType(Me(Me.tabledsShipments.reqDEColumn),Boolean)
            End Get
            Set
                Me(Me.tabledsShipments.reqDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property chkNL() As Boolean
            Get
                Return CType(Me(Me.tabledsShipments.chkNLColumn),Boolean)
            End Get
            Set
                Me(Me.tabledsShipments.chkNLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property chkDE() As Boolean
            Get
                Return CType(Me(Me.tabledsShipments.chkDEColumn),Boolean)
            End Get
            Set
                Me(Me.tabledsShipments.chkDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsArchive_NoNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.Archive_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetArchive_NoNull()
            Me(Me.tabledsShipments.Archive_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsHBLNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.HBLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetHBLNull()
            Me(Me.tabledsShipments.HBLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsMBLNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.MBLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetMBLNull()
            Me(Me.tabledsShipments.MBLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPOLNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.POLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPOLNull()
            Me(Me.tabledsShipments.POLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPODNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.PODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPODNull()
            Me(Me.tabledsShipments.PODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOriginNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.OriginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOriginNull()
            Me(Me.tabledsShipments.OriginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsETDNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.ETDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetETDNull()
            Me(Me.tabledsShipments.ETDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsETANull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.ETAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetETANull()
            Me(Me.tabledsShipments.ETAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPiecesNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.PiecesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPiecesNull()
            Me(Me.tabledsShipments.PiecesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.WeightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetWeightNull()
            Me(Me.tabledsShipments.WeightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsVolumeNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.VolumeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetVolumeNull()
            Me(Me.tabledsShipments.VolumeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsPrincipalNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.PrincipalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetPrincipalNull()
            Me(Me.tabledsShipments.PrincipalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsShipperNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.ShipperColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetShipperNull()
            Me(Me.tabledsShipments.ShipperColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsConsigneeNull() As Boolean
            Return Me.IsNull(Me.tabledsShipments.ConsigneeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetConsigneeNull()
            Me(Me.tabledsShipments.ConsigneeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GetdsContainerRows() As dsContainerRow()
            If (Me.Table.ChildRelations("FK_dsContainer_dsShipments_0") Is Nothing) Then
                Return New dsContainerRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_dsContainer_dsShipments_0")),dsContainerRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dtHSCodeRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtHSCode As dtHSCodeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtHSCode = CType(Me.Table,dtHSCodeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HS_Code() As Long
            Get
                Return CType(Me(Me.tabledtHSCode.HS_CodeColumn),Long)
            End Get
            Set
                Me(Me.tabledtHSCode.HS_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Created() As Date
            Get
                Return CType(Me(Me.tabledtHSCode.CreatedColumn),Date)
            End Get
            Set
                Me(Me.tabledtHSCode.CreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GetdsPhytoRows() As dsPhytoRow()
            If (Me.Table.ChildRelations("FK_dsPhyto_dtHSCode_0") Is Nothing) Then
                Return New dsPhytoRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_dsPhyto_dtHSCode_0")),dsPhytoRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GetdtMatCodeRows() As dtMatCodeRow()
            If (Me.Table.ChildRelations("FK_dtMatCode_dtHSCode_0") Is Nothing) Then
                Return New dtMatCodeRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_dtMatCode_dtHSCode_0")),dtMatCodeRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dtMatCodeRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtMatCode As dtMatCodeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtMatCode = CType(Me.Table,dtMatCodeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Material_ID() As String
            Get
                Return CType(Me(Me.tabledtMatCode.Material_IDColumn),String)
            End Get
            Set
                Me(Me.tabledtMatCode.Material_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Created() As Date
            Get
                Return CType(Me(Me.tabledtMatCode.CreatedColumn),Date)
            End Get
            Set
                Me(Me.tabledtMatCode.CreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HS_Code() As Long
            Get
                Return CType(Me(Me.tabledtMatCode.HS_CodeColumn),Long)
            End Get
            Set
                Me(Me.tabledtMatCode.HS_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtMatCode.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Description in Tabelle dtMatCode ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtMatCode.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property dtHSCodeRow() As dtHSCodeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_dtMatCode_dtHSCode_0")),dtHSCodeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_dtMatCode_dtHSCode_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabledtMatCode.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabledtMatCode.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function GetdsMaterialRows() As dsMaterialRow()
            If (Me.Table.ChildRelations("dtMatCode_dsMaterial") Is Nothing) Then
                Return New dsMaterialRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("dtMatCode_dsMaterial")),dsMaterialRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class sqlite_sequenceRow
        Inherits Global.System.Data.DataRow
        
        Private tablesqlite_sequence As sqlite_sequenceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesqlite_sequence = CType(Me.Table,sqlite_sequenceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablesqlite_sequence.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte name in Tabelle sqlite_sequence ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesqlite_sequence.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property seq() As String
            Get
                Try 
                    Return CType(Me(Me.tablesqlite_sequence.seqColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte seq in Tabelle sqlite_sequence ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesqlite_sequence.seqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablesqlite_sequence.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetnameNull()
            Me(Me.tablesqlite_sequence.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsseqNull() As Boolean
            Return Me.IsNull(Me.tablesqlite_sequence.seqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetseqNull()
            Me(Me.tablesqlite_sequence.seqColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TotalRow
        Inherits Global.System.Data.DataRow
        
        Private tableTotal As TotalDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTotal = CType(Me.Table,TotalDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property STT_NO() As Long
            Get
                Return CType(Me(Me.tableTotal.STT_NOColumn),Long)
            End Get
            Set
                Me(Me.tableTotal.STT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Archive_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableTotal.Archive_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Archive_No in Tabelle Total ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTotal.Archive_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Origin() As String
            Get
                Try 
                    Return CType(Me(Me.tableTotal.OriginColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Origin in Tabelle Total ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTotal.OriginColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Material_ID() As Long
            Get
                Return CType(Me(Me.tableTotal.Material_IDColumn),Long)
            End Get
            Set
                Me(Me.tableTotal.Material_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Material_No() As String
            Get
                Return CType(Me(Me.tableTotal.Material_NoColumn),String)
            End Get
            Set
                Me(Me.tableTotal.Material_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property HS_Code() As Long
            Get
                Return CType(Me(Me.tableTotal.HS_CodeColumn),Long)
            End Get
            Set
                Me(Me.tableTotal.HS_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableTotal.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte Description in Tabelle Total ist DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTotal.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property Container_No() As String
            Get
                Return CType(Me(Me.tableTotal.Container_NoColumn),String)
            End Get
            Set
                Me(Me.tableTotal.Container_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property chkPhytoDone() As Boolean
            Get
                Return CType(Me(Me.tableTotal.chkPhytoDoneColumn),Boolean)
            End Get
            Set
                Me(Me.tableTotal.chkPhytoDoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsArchive_NoNull() As Boolean
            Return Me.IsNull(Me.tableTotal.Archive_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetArchive_NoNull()
            Me(Me.tableTotal.Archive_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsOriginNull() As Boolean
            Return Me.IsNull(Me.tableTotal.OriginColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetOriginNull()
            Me(Me.tableTotal.OriginColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableTotal.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableTotal.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class dsContainerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dsContainerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As dsContainerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As dsContainerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class dsMaterialRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dsMaterialRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As dsMaterialRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As dsMaterialRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class dsPhytoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dsPhytoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As dsPhytoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As dsPhytoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class dsShipmentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dsShipmentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As dsShipmentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As dsShipmentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class dtHSCodeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtHSCodeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As dtHSCodeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As dtHSCodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class dtMatCodeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtMatCodeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As dtMatCodeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As dtMatCodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class sqlite_sequenceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sqlite_sequenceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As sqlite_sequenceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As sqlite_sequenceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class TotalRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TotalRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As TotalRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As TotalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsGroheTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dsContainerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dsContainer"
            tableMapping.ColumnMappings.Add("Container_ID", "Container_ID")
            tableMapping.ColumnMappings.Add("Created", "Created")
            tableMapping.ColumnMappings.Add("Container_No", "Container_No")
            tableMapping.ColumnMappings.Add("STT_No", "STT_No")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""dsContainer"" WHERE ((""Container_ID"" = :Original_Container_ID)"& _ 
                " AND (""Created"" = :Original_Created) AND (""Container_No"" = :Original_Container_N"& _ 
                "o) AND ((:IsNull_STT_No = 1 AND ""STT_No"" IS NULL) OR (""STT_No"" = :Original_STT_N"& _ 
                "o)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Container_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Container_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Container_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Container_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_STT_No"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "STT_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_STT_No"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "STT_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""dsContainer"" (""Container_ID"", ""Created"", ""Container_No"", ""STT"& _ 
                "_No"") VALUES (:Container_ID, :Created, :Container_No, :STT_No)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Container_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Container_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Container_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Container_No"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "STT_No"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "STT_No"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""dsContainer"" SET ""Container_ID"" = :Container_ID, ""Created"" = :Crea"& _ 
                "ted, ""Container_No"" = :Container_No, ""STT_No"" = :STT_No WHERE ((""Container_ID"" ="& _ 
                " :Original_Container_ID) AND (""Created"" = :Original_Created) AND (""Container_No"""& _ 
                " = :Original_Container_No) AND ((:IsNull_STT_No = 1 AND ""STT_No"" IS NULL) OR (""S"& _ 
                "TT_No"" = :Original_STT_No)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Container_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Container_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Container_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Container_No"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "STT_No"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "STT_No"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Container_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Container_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Container_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Container_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_STT_No"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "STT_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_STT_No"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "STT_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.Grohe_Phyto.My.MySettings.Default.conGrohe_Phyto
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Container_ID, Created, Container_No, STT_No FROM ""main"".dsContainer"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsGrohe.dsContainerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsGrohe.dsContainerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsGrohe.dsContainerDataTable = New dsGrohe.dsContainerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsGrohe.dsContainerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsGrohe) As Integer
            Return Me.Adapter.Update(dataSet, "dsContainer")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Container_ID As Long, ByVal Original_Created As Date, ByVal Original_Container_No As String, ByVal Original_STT_No As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Container_ID,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Created,Date)
            If (Original_Container_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Container_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Container_No,String)
            End If
            If (Original_STT_No.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_STT_No.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Container_ID As Long, ByVal Created As Date, ByVal Container_No As String, ByVal STT_No As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Container_ID,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Created,Date)
            If (Container_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Container_No")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Container_No,String)
            End If
            If (STT_No.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STT_No.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Container_ID As Long, ByVal Created As Date, ByVal Container_No As String, ByVal STT_No As Global.System.Nullable(Of Long), ByVal Original_Container_ID As Long, ByVal Original_Created As Date, ByVal Original_Container_No As String, ByVal Original_STT_No As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Container_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Created,Date)
            If (Container_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Container_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Container_No,String)
            End If
            If (STT_No.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(STT_No.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Container_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Created,Date)
            If (Original_Container_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Container_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Container_No,String)
            End If
            If (Original_STT_No.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_STT_No.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Created As Date, ByVal Container_No As String, ByVal STT_No As Global.System.Nullable(Of Long), ByVal Original_Container_ID As Long, ByVal Original_Created As Date, ByVal Original_Container_No As String, ByVal Original_STT_No As Global.System.Nullable(Of Long)) As Integer
            Return Me.Update(Original_Container_ID, Created, Container_No, STT_No, Original_Container_ID, Original_Created, Original_Container_No, Original_STT_No)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dsMaterialTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dsMaterial"
            tableMapping.ColumnMappings.Add("Material_ID", "Material_ID")
            tableMapping.ColumnMappings.Add("Created", "Created")
            tableMapping.ColumnMappings.Add("Container_ID", "Container_ID")
            tableMapping.ColumnMappings.Add("Material_No", "Material_No")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""dsMaterial"" WHERE ((""Material_ID"" = :Original_Material_ID) AN"& _ 
                "D (""Created"" = :Original_Created) AND (""Container_ID"" = :Original_Container_ID) "& _ 
                "AND (""Material_No"" = :Original_Material_No))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Material_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Material_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Container_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Container_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Material_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Material_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""dsMaterial"" (""Material_ID"", ""Created"", ""Container_ID"", ""Mater"& _ 
                "ial_No"") VALUES (:Material_ID, :Created, :Container_ID, :Material_No)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Material_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Material_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Container_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Container_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Material_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Material_No"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""dsMaterial"" SET ""Material_ID"" = :Material_ID, ""Created"" = :Created"& _ 
                ", ""Container_ID"" = :Container_ID, ""Material_No"" = :Material_No WHERE ((""Material"& _ 
                "_ID"" = :Original_Material_ID) AND (""Created"" = :Original_Created) AND (""Containe"& _ 
                "r_ID"" = :Original_Container_ID) AND (""Material_No"" = :Original_Material_No))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Material_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Material_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Container_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Container_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Material_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Material_No"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Material_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Material_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Container_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Container_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Material_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Material_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.Grohe_Phyto.My.MySettings.Default.conGrohe_Phyto
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Material_ID, Created, Container_ID, Material_No FROM ""main"".dsMaterial"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsGrohe.dsMaterialDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsGrohe.dsMaterialDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsGrohe.dsMaterialDataTable = New dsGrohe.dsMaterialDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsGrohe.dsMaterialDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsGrohe) As Integer
            Return Me.Adapter.Update(dataSet, "dsMaterial")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Material_ID As Long, ByVal Original_Created As Date, ByVal Original_Container_ID As Long, ByVal Original_Material_No As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Material_ID,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Created,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Container_ID,Long)
            If (Original_Material_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Material_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Material_No,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Material_ID As Long, ByVal Created As Date, ByVal Container_ID As Long, ByVal Material_No As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Material_ID,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Created,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Container_ID,Long)
            If (Material_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Material_No")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Material_No,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Material_ID As Long, ByVal Created As Date, ByVal Container_ID As Long, ByVal Material_No As String, ByVal Original_Material_ID As Long, ByVal Original_Created As Date, ByVal Original_Container_ID As Long, ByVal Original_Material_No As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Material_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Created,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Container_ID,Long)
            If (Material_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Material_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Material_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Material_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Created,Date)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Container_ID,Long)
            If (Original_Material_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Material_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Material_No,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Created As Date, ByVal Container_ID As Long, ByVal Material_No As String, ByVal Original_Material_ID As Long, ByVal Original_Created As Date, ByVal Original_Container_ID As Long, ByVal Original_Material_No As String) As Integer
            Return Me.Update(Original_Material_ID, Created, Container_ID, Material_No, Original_Material_ID, Original_Created, Original_Container_ID, Original_Material_No)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dsPhytoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dsPhyto"
            tableMapping.ColumnMappings.Add("Phyto_ID", "Phyto_ID")
            tableMapping.ColumnMappings.Add("Created", "Created")
            tableMapping.ColumnMappings.Add("HS_Code", "HS_Code")
            tableMapping.ColumnMappings.Add("Origin", "Origin")
            tableMapping.ColumnMappings.Add("reqModel99", "reqModel99")
            tableMapping.ColumnMappings.Add("reqPhytoDE", "reqPhytoDE")
            tableMapping.ColumnMappings.Add("chklatest", "chklatest")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""dsPhyto"" WHERE ((""Phyto_ID"" = :Original_Phyto_ID) AND (""Creat"& _ 
                "ed"" = :Original_Created) AND (""HS_Code"" = :Original_HS_Code) AND ((:IsNull_Origi"& _ 
                "n = 1 AND ""Origin"" IS NULL) OR (""Origin"" = :Original_Origin)) AND ((:IsNull_reqM"& _ 
                "odel99 = 1 AND ""reqModel99"" IS NULL) OR (""reqModel99"" = :Original_reqModel99)) A"& _ 
                "ND ((:IsNull_reqPhytoDE = 1 AND ""reqPhytoDE"" IS NULL) OR (""reqPhytoDE"" = :Origin"& _ 
                "al_reqPhytoDE)) AND ((:IsNull_chklatest = 1 AND ""chklatest"" IS NULL) OR (""chklat"& _ 
                "est"" = :Original_chklatest)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Phyto_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Phyto_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Origin"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Origin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Origin"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Origin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_reqModel99"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "reqModel99"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_reqModel99"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqModel99"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_reqPhytoDE"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "reqPhytoDE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_reqPhytoDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqPhytoDE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_chklatest"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "chklatest"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_chklatest"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "chklatest"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""dsPhyto"" (""Phyto_ID"", ""Created"", ""HS_Code"", ""Origin"", ""reqMod"& _ 
                "el99"", ""reqPhytoDE"", ""chklatest"") VALUES (:Phyto_ID, :Created, :HS_Code, :Origin"& _ 
                ", :reqModel99, :reqPhytoDE, :chklatest)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Phyto_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Phyto_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Origin"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Origin"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "reqModel99"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqModel99"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "reqPhytoDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqPhytoDE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "chklatest"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "chklatest"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""dsPhyto"" SET ""Phyto_ID"" = :Phyto_ID, ""Created"" = :Created, ""HS_Cod"& _ 
                "e"" = :HS_Code, ""Origin"" = :Origin, ""reqModel99"" = :reqModel99, ""reqPhytoDE"" = :r"& _ 
                "eqPhytoDE, ""chklatest"" = :chklatest WHERE ((""Phyto_ID"" = :Original_Phyto_ID) AND"& _ 
                " (""Created"" = :Original_Created) AND (""HS_Code"" = :Original_HS_Code) AND ((:IsNu"& _ 
                "ll_Origin = 1 AND ""Origin"" IS NULL) OR (""Origin"" = :Original_Origin)) AND ((:IsN"& _ 
                "ull_reqModel99 = 1 AND ""reqModel99"" IS NULL) OR (""reqModel99"" = :Original_reqMod"& _ 
                "el99)) AND ((:IsNull_reqPhytoDE = 1 AND ""reqPhytoDE"" IS NULL) OR (""reqPhytoDE"" ="& _ 
                " :Original_reqPhytoDE)) AND ((:IsNull_chklatest = 1 AND ""chklatest"" IS NULL) OR "& _ 
                "(""chklatest"" = :Original_chklatest)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Phyto_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Phyto_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Origin"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Origin"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "reqModel99"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqModel99"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "reqPhytoDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqPhytoDE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "chklatest"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "chklatest"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Phyto_ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Phyto_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Origin"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Origin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Origin"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Origin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_reqModel99"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "reqModel99"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_reqModel99"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqModel99"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_reqPhytoDE"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "reqPhytoDE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_reqPhytoDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqPhytoDE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_chklatest"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "chklatest"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_chklatest"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "chklatest"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.Grohe_Phyto.My.MySettings.Default.conGrohe_Phyto
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Phyto_ID, Created, HS_Code, Origin, reqModel99, reqPhytoDE, chklatest FROM"& _ 
                " ""main"".dsPhyto"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsGrohe.dsPhytoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsGrohe.dsPhytoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsGrohe.dsPhytoDataTable = New dsGrohe.dsPhytoDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsGrohe.dsPhytoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsGrohe) As Integer
            Return Me.Adapter.Update(dataSet, "dsPhyto")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Phyto_ID As Long, ByVal Original_Created As Date, ByVal Original_HS_Code As Long, ByVal Original_Origin As String, ByVal Original_reqModel99 As Global.System.Nullable(Of Short), ByVal Original_reqPhytoDE As Global.System.Nullable(Of Short), ByVal Original_chklatest As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Phyto_ID,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Created,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_HS_Code,Long)
            If (Original_Origin Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Origin,String)
            End If
            If (Original_reqModel99.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_reqModel99.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_reqPhytoDE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_reqPhytoDE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_chklatest.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_chklatest.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Phyto_ID As Long, ByVal Created As Date, ByVal HS_Code As Long, ByVal Origin As String, ByVal reqModel99 As Global.System.Nullable(Of Short), ByVal reqPhytoDE As Global.System.Nullable(Of Short), ByVal chklatest As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Phyto_ID,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Created,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(HS_Code,Long)
            If (Origin Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Origin,String)
            End If
            If (reqModel99.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(reqModel99.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (reqPhytoDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(reqPhytoDE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (chklatest.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(chklatest.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Phyto_ID As Long, ByVal Created As Date, ByVal HS_Code As Long, ByVal Origin As String, ByVal reqModel99 As Global.System.Nullable(Of Short), ByVal reqPhytoDE As Global.System.Nullable(Of Short), ByVal chklatest As Global.System.Nullable(Of Date), ByVal Original_Phyto_ID As Long, ByVal Original_Created As Date, ByVal Original_HS_Code As Long, ByVal Original_Origin As String, ByVal Original_reqModel99 As Global.System.Nullable(Of Short), ByVal Original_reqPhytoDE As Global.System.Nullable(Of Short), ByVal Original_chklatest As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Phyto_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Created,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(HS_Code,Long)
            If (Origin Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Origin,String)
            End If
            If (reqModel99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(reqModel99.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (reqPhytoDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(reqPhytoDE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (chklatest.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(chklatest.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Phyto_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Created,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_HS_Code,Long)
            If (Original_Origin Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Origin,String)
            End If
            If (Original_reqModel99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_reqModel99.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_reqPhytoDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_reqPhytoDE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_chklatest.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_chklatest.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Created As Date, ByVal HS_Code As Long, ByVal Origin As String, ByVal reqModel99 As Global.System.Nullable(Of Short), ByVal reqPhytoDE As Global.System.Nullable(Of Short), ByVal chklatest As Global.System.Nullable(Of Date), ByVal Original_Phyto_ID As Long, ByVal Original_Created As Date, ByVal Original_HS_Code As Long, ByVal Original_Origin As String, ByVal Original_reqModel99 As Global.System.Nullable(Of Short), ByVal Original_reqPhytoDE As Global.System.Nullable(Of Short), ByVal Original_chklatest As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_Phyto_ID, Created, HS_Code, Origin, reqModel99, reqPhytoDE, chklatest, Original_Phyto_ID, Original_Created, Original_HS_Code, Original_Origin, Original_reqModel99, Original_reqPhytoDE, Original_chklatest)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dsShipmentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dsShipments"
            tableMapping.ColumnMappings.Add("STT_NO", "STT_NO")
            tableMapping.ColumnMappings.Add("Created", "Created")
            tableMapping.ColumnMappings.Add("Archive_No", "Archive_No")
            tableMapping.ColumnMappings.Add("HBL", "HBL")
            tableMapping.ColumnMappings.Add("MBL", "MBL")
            tableMapping.ColumnMappings.Add("POL", "POL")
            tableMapping.ColumnMappings.Add("POD", "POD")
            tableMapping.ColumnMappings.Add("Origin", "Origin")
            tableMapping.ColumnMappings.Add("ETD", "ETD")
            tableMapping.ColumnMappings.Add("ETA", "ETA")
            tableMapping.ColumnMappings.Add("Pieces", "Pieces")
            tableMapping.ColumnMappings.Add("Weight", "Weight")
            tableMapping.ColumnMappings.Add("Volume", "Volume")
            tableMapping.ColumnMappings.Add("Principal", "Principal")
            tableMapping.ColumnMappings.Add("Shipper", "Shipper")
            tableMapping.ColumnMappings.Add("Consignee", "Consignee")
            tableMapping.ColumnMappings.Add("chkPhytoDone", "chkPhytoDone")
            tableMapping.ColumnMappings.Add("reqNL", "reqNL")
            tableMapping.ColumnMappings.Add("reqDE", "reqDE")
            tableMapping.ColumnMappings.Add("chkNL", "chkNL")
            tableMapping.ColumnMappings.Add("chkDE", "chkDE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""dsShipments"" WHERE ((""STT_NO"" = :Original_STT_NO) AND (""Creat"& _ 
                "ed"" = :Original_Created) AND ((:IsNull_Archive_No = 1 AND ""Archive_No"" IS NULL) "& _ 
                "OR (""Archive_No"" = :Original_Archive_No)) AND ((:IsNull_HBL = 1 AND ""HBL"" IS NUL"& _ 
                "L) OR (""HBL"" = :Original_HBL)) AND ((:IsNull_MBL = 1 AND ""MBL"" IS NULL) OR (""MBL"& _ 
                """ = :Original_MBL)) AND ((:IsNull_POL = 1 AND ""POL"" IS NULL) OR (""POL"" = :Origin"& _ 
                "al_POL)) AND ((:IsNull_POD = 1 AND ""POD"" IS NULL) OR (""POD"" = :Original_POD)) AN"& _ 
                "D ((:IsNull_Origin = 1 AND ""Origin"" IS NULL) OR (""Origin"" = :Original_Origin)) A"& _ 
                "ND ((:IsNull_ETD = 1 AND ""ETD"" IS NULL) OR (""ETD"" = :Original_ETD)) AND ((:IsNul"& _ 
                "l_ETA = 1 AND ""ETA"" IS NULL) OR (""ETA"" = :Original_ETA)) AND ((:IsNull_Pieces = "& _ 
                "1 AND ""Pieces"" IS NULL) OR (""Pieces"" = :Original_Pieces)) AND ((:IsNull_Weight ="& _ 
                " 1 AND ""Weight"" IS NULL) OR (""Weight"" = :Original_Weight)) AND ((:IsNull_Volume "& _ 
                "= 1 AND ""Volume"" IS NULL) OR (""Volume"" = :Original_Volume)) AND ((:IsNull_Princi"& _ 
                "pal = 1 AND ""Principal"" IS NULL) OR (""Principal"" = :Original_Principal)) AND ((:"& _ 
                "IsNull_Shipper = 1 AND ""Shipper"" IS NULL) OR (""Shipper"" = :Original_Shipper)) AN"& _ 
                "D ((:IsNull_Consignee = 1 AND ""Consignee"" IS NULL) OR (""Consignee"" = :Original_C"& _ 
                "onsignee)) AND (""chkPhytoDone"" = :Original_chkPhytoDone) AND (""reqNL"" = :Origina"& _ 
                "l_reqNL) AND (""reqDE"" = :Original_reqDE) AND (""chkNL"" = :Original_chkNL) AND (""c"& _ 
                "hkDE"" = :Original_chkDE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_STT_NO"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "STT_NO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Archive_No"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Archive_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Archive_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Archive_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_HBL"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "HBL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HBL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "HBL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_MBL"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "MBL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_MBL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "MBL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_POL"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "POL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_POL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "POL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_POD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "POD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_POD"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "POD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Origin"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Origin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Origin"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Origin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ETD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ETD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ETD"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ETD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ETA"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ETA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ETA"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ETA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Pieces"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Pieces"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Pieces"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Pieces"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Weight"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Weight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Weight"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Weight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Volume"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Volume"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Volume"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Volume"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Principal"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Principal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Principal"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Principal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Shipper"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Shipper"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Shipper"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Shipper"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Consignee"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Consignee"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Consignee"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Consignee"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_chkPhytoDone"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkPhytoDone"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_reqNL"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqNL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_reqDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqDE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_chkNL"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkNL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_chkDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkDE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""dsShipments"" (""STT_NO"", ""Created"", ""Archive_No"", ""HBL"", ""MBL"""& _ 
                ", ""POL"", ""POD"", ""Origin"", ""ETD"", ""ETA"", ""Pieces"", ""Weight"", ""Volume"", ""Principal"& _ 
                """, ""Shipper"", ""Consignee"", ""chkPhytoDone"", ""reqNL"", ""reqDE"", ""chkNL"", ""chkDE"") V"& _ 
                "ALUES (:STT_NO, :Created, :Archive_No, :HBL, :MBL, :POL, :POD, :Origin, :ETD, :E"& _ 
                "TA, :Pieces, :Weight, :Volume, :Principal, :Shipper, :Consignee, :chkPhytoDone, "& _ 
                ":reqNL, :reqDE, :chkNL, :chkDE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "STT_NO"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "STT_NO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Archive_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Archive_No"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HBL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "HBL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "MBL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "MBL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "POL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "POL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "POD"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "POD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Origin"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Origin"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ETD"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ETD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ETA"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ETA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Pieces"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Pieces"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Weight"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Weight"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Volume"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Volume"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Principal"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Principal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Shipper"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Shipper"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Consignee"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Consignee"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "chkPhytoDone"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkPhytoDone"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "reqNL"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqNL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "reqDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqDE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "chkNL"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkNL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "chkDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkDE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""dsShipments"" SET ""STT_NO"" = :STT_NO, ""Created"" = :Created, ""Archiv"& _ 
                "e_No"" = :Archive_No, ""HBL"" = :HBL, ""MBL"" = :MBL, ""POL"" = :POL, ""POD"" = :POD, ""Or"& _ 
                "igin"" = :Origin, ""ETD"" = :ETD, ""ETA"" = :ETA, ""Pieces"" = :Pieces, ""Weight"" = :Wei"& _ 
                "ght, ""Volume"" = :Volume, ""Principal"" = :Principal, ""Shipper"" = :Shipper, ""Consig"& _ 
                "nee"" = :Consignee, ""chkPhytoDone"" = :chkPhytoDone, ""reqNL"" = :reqNL, ""reqDE"" = :"& _ 
                "reqDE, ""chkNL"" = :chkNL, ""chkDE"" = :chkDE WHERE ((""STT_NO"" = :Original_STT_NO) A"& _ 
                "ND (""Created"" = :Original_Created) AND ((:IsNull_Archive_No = 1 AND ""Archive_No"""& _ 
                " IS NULL) OR (""Archive_No"" = :Original_Archive_No)) AND ((:IsNull_HBL = 1 AND ""H"& _ 
                "BL"" IS NULL) OR (""HBL"" = :Original_HBL)) AND ((:IsNull_MBL = 1 AND ""MBL"" IS NULL"& _ 
                ") OR (""MBL"" = :Original_MBL)) AND ((:IsNull_POL = 1 AND ""POL"" IS NULL) OR (""POL"""& _ 
                " = :Original_POL)) AND ((:IsNull_POD = 1 AND ""POD"" IS NULL) OR (""POD"" = :Origina"& _ 
                "l_POD)) AND ((:IsNull_Origin = 1 AND ""Origin"" IS NULL) OR (""Origin"" = :Original_"& _ 
                "Origin)) AND ((:IsNull_ETD = 1 AND ""ETD"" IS NULL) OR (""ETD"" = :Original_ETD)) AN"& _ 
                "D ((:IsNull_ETA = 1 AND ""ETA"" IS NULL) OR (""ETA"" = :Original_ETA)) AND ((:IsNull"& _ 
                "_Pieces = 1 AND ""Pieces"" IS NULL) OR (""Pieces"" = :Original_Pieces)) AND ((:IsNul"& _ 
                "l_Weight = 1 AND ""Weight"" IS NULL) OR (""Weight"" = :Original_Weight)) AND ((:IsNu"& _ 
                "ll_Volume = 1 AND ""Volume"" IS NULL) OR (""Volume"" = :Original_Volume)) AND ((:IsN"& _ 
                "ull_Principal = 1 AND ""Principal"" IS NULL) OR (""Principal"" = :Original_Principal"& _ 
                ")) AND ((:IsNull_Shipper = 1 AND ""Shipper"" IS NULL) OR (""Shipper"" = :Original_Sh"& _ 
                "ipper)) AND ((:IsNull_Consignee = 1 AND ""Consignee"" IS NULL) OR (""Consignee"" = :"& _ 
                "Original_Consignee)) AND (""chkPhytoDone"" = :Original_chkPhytoDone) AND (""reqNL"" "& _ 
                "= :Original_reqNL) AND (""reqDE"" = :Original_reqDE) AND (""chkNL"" = :Original_chkN"& _ 
                "L) AND (""chkDE"" = :Original_chkDE))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "STT_NO"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "STT_NO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Archive_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Archive_No"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HBL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "HBL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "MBL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "MBL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "POL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "POL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "POD"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "POD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Origin"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Origin"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ETD"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ETD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ETA"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ETA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Pieces"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Pieces"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Weight"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Weight"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Volume"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Volume"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Principal"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Principal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Shipper"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Shipper"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Consignee"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Consignee"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "chkPhytoDone"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkPhytoDone"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "reqNL"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqNL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "reqDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqDE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "chkNL"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkNL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "chkDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkDE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_STT_NO"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "STT_NO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Archive_No"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Archive_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Archive_No"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Archive_No"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_HBL"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "HBL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HBL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "HBL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_MBL"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "MBL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_MBL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "MBL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_POL"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "POL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_POL"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "POL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_POD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "POD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_POD"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "POD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Origin"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Origin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Origin"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Origin"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ETD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ETD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ETD"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ETD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ETA"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ETA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ETA"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "ETA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Pieces"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Pieces"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Pieces"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "Pieces"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Weight"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Weight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Weight"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Weight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Volume"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Volume"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Volume"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Volume"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Principal"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Principal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Principal"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Principal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Shipper"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Shipper"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Shipper"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Shipper"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Consignee"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Consignee"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Consignee"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Consignee"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_chkPhytoDone"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkPhytoDone"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_reqNL"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqNL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_reqDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "reqDE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_chkNL"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkNL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_chkDE"
            param.DbType = Global.System.Data.DbType.Int16
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int16
            param.IsNullable = true
            param.SourceColumn = "chkDE"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.Grohe_Phyto.My.MySettings.Default.conGrohe_Phyto
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT STT_NO, Created, Archive_No, HBL, MBL, POL, POD, Origin, ETD, ETA, Pieces,"& _ 
                " Weight, Volume, Principal, Shipper, Consignee, chkPhytoDone, reqNL, reqDE, chkN"& _ 
                "L, chkDE FROM ""main"".dsShipments"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsGrohe.dsShipmentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsGrohe.dsShipmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsGrohe.dsShipmentsDataTable = New dsGrohe.dsShipmentsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsGrohe.dsShipmentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsGrohe) As Integer
            Return Me.Adapter.Update(dataSet, "dsShipments")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_STT_NO As Long,  _
                    ByVal Original_Created As Date,  _
                    ByVal Original_Archive_No As String,  _
                    ByVal Original_HBL As String,  _
                    ByVal Original_MBL As String,  _
                    ByVal Original_POL As String,  _
                    ByVal Original_POD As String,  _
                    ByVal Original_Origin As String,  _
                    ByVal Original_ETD As Global.System.Nullable(Of Date),  _
                    ByVal Original_ETA As Global.System.Nullable(Of Date),  _
                    ByVal Original_Pieces As Global.System.Nullable(Of Long),  _
                    ByVal Original_Weight As Global.System.Nullable(Of Double),  _
                    ByVal Original_Volume As Global.System.Nullable(Of Double),  _
                    ByVal Original_Principal As String,  _
                    ByVal Original_Shipper As String,  _
                    ByVal Original_Consignee As String,  _
                    ByVal Original_chkPhytoDone As Short,  _
                    ByVal Original_reqNL As Short,  _
                    ByVal Original_reqDE As Short,  _
                    ByVal Original_chkNL As Short,  _
                    ByVal Original_chkDE As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_STT_NO,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Created,Date)
            If (Original_Archive_No Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Archive_No,String)
            End If
            If (Original_HBL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_HBL,String)
            End If
            If (Original_MBL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MBL,String)
            End If
            If (Original_POL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_POL,String)
            End If
            If (Original_POD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_POD,String)
            End If
            If (Original_Origin Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Origin,String)
            End If
            If (Original_ETD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_ETD.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_ETA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_ETA.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Pieces.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Pieces.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_Weight.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Weight.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_Volume.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_Volume.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_Principal Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_Principal,String)
            End If
            If (Original_Shipper Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_Shipper,String)
            End If
            If (Original_Consignee Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_Consignee,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_chkPhytoDone,Short)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_reqNL,Short)
            Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_reqDE,Short)
            Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_chkNL,Short)
            Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_chkDE,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal STT_NO As Long,  _
                    ByVal Created As Date,  _
                    ByVal Archive_No As String,  _
                    ByVal HBL As String,  _
                    ByVal MBL As String,  _
                    ByVal POL As String,  _
                    ByVal POD As String,  _
                    ByVal Origin As String,  _
                    ByVal ETD As Global.System.Nullable(Of Date),  _
                    ByVal ETA As Global.System.Nullable(Of Date),  _
                    ByVal Pieces As Global.System.Nullable(Of Long),  _
                    ByVal Weight As Global.System.Nullable(Of Double),  _
                    ByVal Volume As Global.System.Nullable(Of Double),  _
                    ByVal Principal As String,  _
                    ByVal Shipper As String,  _
                    ByVal Consignee As String,  _
                    ByVal chkPhytoDone As Short,  _
                    ByVal reqNL As Short,  _
                    ByVal reqDE As Short,  _
                    ByVal chkNL As Short,  _
                    ByVal chkDE As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(STT_NO,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Created,Date)
            If (Archive_No Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Archive_No,String)
            End If
            If (HBL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(HBL,String)
            End If
            If (MBL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MBL,String)
            End If
            If (POL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(POL,String)
            End If
            If (POD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(POD,String)
            End If
            If (Origin Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Origin,String)
            End If
            If (ETD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ETD.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ETA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ETA.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Pieces.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Pieces.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Weight.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Weight.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Volume.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Volume.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Principal Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Principal,String)
            End If
            If (Shipper Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Shipper,String)
            End If
            If (Consignee Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Consignee,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(chkPhytoDone,Short)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(reqNL,Short)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(reqDE,Short)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(chkNL,Short)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(chkDE,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal STT_NO As Long,  _
                    ByVal Created As Date,  _
                    ByVal Archive_No As String,  _
                    ByVal HBL As String,  _
                    ByVal MBL As String,  _
                    ByVal POL As String,  _
                    ByVal POD As String,  _
                    ByVal Origin As String,  _
                    ByVal ETD As Global.System.Nullable(Of Date),  _
                    ByVal ETA As Global.System.Nullable(Of Date),  _
                    ByVal Pieces As Global.System.Nullable(Of Long),  _
                    ByVal Weight As Global.System.Nullable(Of Double),  _
                    ByVal Volume As Global.System.Nullable(Of Double),  _
                    ByVal Principal As String,  _
                    ByVal Shipper As String,  _
                    ByVal Consignee As String,  _
                    ByVal chkPhytoDone As Short,  _
                    ByVal reqNL As Short,  _
                    ByVal reqDE As Short,  _
                    ByVal chkNL As Short,  _
                    ByVal chkDE As Short,  _
                    ByVal Original_STT_NO As Long,  _
                    ByVal Original_Created As Date,  _
                    ByVal Original_Archive_No As String,  _
                    ByVal Original_HBL As String,  _
                    ByVal Original_MBL As String,  _
                    ByVal Original_POL As String,  _
                    ByVal Original_POD As String,  _
                    ByVal Original_Origin As String,  _
                    ByVal Original_ETD As Global.System.Nullable(Of Date),  _
                    ByVal Original_ETA As Global.System.Nullable(Of Date),  _
                    ByVal Original_Pieces As Global.System.Nullable(Of Long),  _
                    ByVal Original_Weight As Global.System.Nullable(Of Double),  _
                    ByVal Original_Volume As Global.System.Nullable(Of Double),  _
                    ByVal Original_Principal As String,  _
                    ByVal Original_Shipper As String,  _
                    ByVal Original_Consignee As String,  _
                    ByVal Original_chkPhytoDone As Short,  _
                    ByVal Original_reqNL As Short,  _
                    ByVal Original_reqDE As Short,  _
                    ByVal Original_chkNL As Short,  _
                    ByVal Original_chkDE As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(STT_NO,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Created,Date)
            If (Archive_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Archive_No,String)
            End If
            If (HBL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(HBL,String)
            End If
            If (MBL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MBL,String)
            End If
            If (POL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(POL,String)
            End If
            If (POD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(POD,String)
            End If
            If (Origin Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Origin,String)
            End If
            If (ETD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ETD.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ETA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ETA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Pieces.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Pieces.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Weight.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Weight.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Volume.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Volume.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Principal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Principal,String)
            End If
            If (Shipper Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Shipper,String)
            End If
            If (Consignee Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Consignee,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(chkPhytoDone,Short)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(reqNL,Short)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(reqDE,Short)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(chkNL,Short)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(chkDE,Short)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_STT_NO,Long)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Created,Date)
            If (Original_Archive_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Archive_No,String)
            End If
            If (Original_HBL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_HBL,String)
            End If
            If (Original_MBL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_MBL,String)
            End If
            If (Original_POL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_POL,String)
            End If
            If (Original_POD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_POD,String)
            End If
            If (Original_Origin Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Origin,String)
            End If
            If (Original_ETD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_ETD.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_ETA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ETA.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_Pieces.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Pieces.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Weight.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Weight.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_Volume.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Volume.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_Principal Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Principal,String)
            End If
            If (Original_Shipper Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Shipper,String)
            End If
            If (Original_Consignee Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Consignee,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_chkPhytoDone,Short)
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_reqNL,Short)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_reqDE,Short)
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_chkNL,Short)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_chkDE,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Created As Date,  _
                    ByVal Archive_No As String,  _
                    ByVal HBL As String,  _
                    ByVal MBL As String,  _
                    ByVal POL As String,  _
                    ByVal POD As String,  _
                    ByVal Origin As String,  _
                    ByVal ETD As Global.System.Nullable(Of Date),  _
                    ByVal ETA As Global.System.Nullable(Of Date),  _
                    ByVal Pieces As Global.System.Nullable(Of Long),  _
                    ByVal Weight As Global.System.Nullable(Of Double),  _
                    ByVal Volume As Global.System.Nullable(Of Double),  _
                    ByVal Principal As String,  _
                    ByVal Shipper As String,  _
                    ByVal Consignee As String,  _
                    ByVal chkPhytoDone As Short,  _
                    ByVal reqNL As Short,  _
                    ByVal reqDE As Short,  _
                    ByVal chkNL As Short,  _
                    ByVal chkDE As Short,  _
                    ByVal Original_STT_NO As Long,  _
                    ByVal Original_Created As Date,  _
                    ByVal Original_Archive_No As String,  _
                    ByVal Original_HBL As String,  _
                    ByVal Original_MBL As String,  _
                    ByVal Original_POL As String,  _
                    ByVal Original_POD As String,  _
                    ByVal Original_Origin As String,  _
                    ByVal Original_ETD As Global.System.Nullable(Of Date),  _
                    ByVal Original_ETA As Global.System.Nullable(Of Date),  _
                    ByVal Original_Pieces As Global.System.Nullable(Of Long),  _
                    ByVal Original_Weight As Global.System.Nullable(Of Double),  _
                    ByVal Original_Volume As Global.System.Nullable(Of Double),  _
                    ByVal Original_Principal As String,  _
                    ByVal Original_Shipper As String,  _
                    ByVal Original_Consignee As String,  _
                    ByVal Original_chkPhytoDone As Short,  _
                    ByVal Original_reqNL As Short,  _
                    ByVal Original_reqDE As Short,  _
                    ByVal Original_chkNL As Short,  _
                    ByVal Original_chkDE As Short) As Integer
            Return Me.Update(Original_STT_NO, Created, Archive_No, HBL, MBL, POL, POD, Origin, ETD, ETA, Pieces, Weight, Volume, Principal, Shipper, Consignee, chkPhytoDone, reqNL, reqDE, chkNL, chkDE, Original_STT_NO, Original_Created, Original_Archive_No, Original_HBL, Original_MBL, Original_POL, Original_POD, Original_Origin, Original_ETD, Original_ETA, Original_Pieces, Original_Weight, Original_Volume, Original_Principal, Original_Shipper, Original_Consignee, Original_chkPhytoDone, Original_reqNL, Original_reqDE, Original_chkNL, Original_chkDE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtHSCodeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtHSCode"
            tableMapping.ColumnMappings.Add("HS_Code", "HS_Code")
            tableMapping.ColumnMappings.Add("Created", "Created")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""dtHSCode"" WHERE ((""HS_Code"" = :Original_HS_Code) AND (""Create"& _ 
                "d"" = :Original_Created))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""dtHSCode"" (""HS_Code"", ""Created"") VALUES (:HS_Code, :Created)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""dtHSCode"" SET ""HS_Code"" = :HS_Code, ""Created"" = :Created WHERE (("""& _ 
                "HS_Code"" = :Original_HS_Code) AND (""Created"" = :Original_Created))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.Grohe_Phyto.My.MySettings.Default.conGrohe_Phyto
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT HS_Code, Created FROM ""main"".dtHSCode"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsGrohe.dtHSCodeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsGrohe.dtHSCodeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsGrohe.dtHSCodeDataTable = New dsGrohe.dtHSCodeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsGrohe.dtHSCodeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsGrohe) As Integer
            Return Me.Adapter.Update(dataSet, "dtHSCode")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_HS_Code As Long, ByVal Original_Created As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_HS_Code,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Created,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal HS_Code As Long, ByVal Created As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(HS_Code,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Created,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal HS_Code As Long, ByVal Created As Date, ByVal Original_HS_Code As Long, ByVal Original_Created As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(HS_Code,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Created,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_HS_Code,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_Created,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Created As Date, ByVal Original_HS_Code As Long, ByVal Original_Created As Date) As Integer
            Return Me.Update(Original_HS_Code, Created, Original_HS_Code, Original_Created)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dtMatCodeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dtMatCode"
            tableMapping.ColumnMappings.Add("Material_ID", "Material_ID")
            tableMapping.ColumnMappings.Add("Created", "Created")
            tableMapping.ColumnMappings.Add("HS_Code", "HS_Code")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""dtMatCode"" WHERE ((""Material_ID"" = :Original_Material_ID) AND"& _ 
                " (""Created"" = :Original_Created) AND (""HS_Code"" = :Original_HS_Code) AND ((:IsNu"& _ 
                "ll_Description = 1 AND ""Description"" IS NULL) OR (""Description"" = :Original_Desc"& _ 
                "ription)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Material_ID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Material_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Description"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Description"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""dtMatCode"" (""Material_ID"", ""Created"", ""HS_Code"", ""Description"& _ 
                """) VALUES (:Material_ID, :Created, :HS_Code, :Description)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Material_ID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Material_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Description"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Description"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""dtMatCode"" SET ""Material_ID"" = :Material_ID, ""Created"" = :Created,"& _ 
                " ""HS_Code"" = :HS_Code, ""Description"" = :Description WHERE ((""Material_ID"" = :Ori"& _ 
                "ginal_Material_ID) AND (""Created"" = :Original_Created) AND (""HS_Code"" = :Origina"& _ 
                "l_HS_Code) AND ((:IsNull_Description = 1 AND ""Description"" IS NULL) OR (""Descrip"& _ 
                "tion"" = :Original_Description)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Material_ID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Material_ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Description"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Description"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Material_ID"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Material_ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_HS_Code"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "HS_Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Description"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Description"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "Description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.Grohe_Phyto.My.MySettings.Default.conGrohe_Phyto
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Material_ID, Created, HS_Code, Description FROM ""main"".dtMatCode"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsGrohe.dtMatCodeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsGrohe.dtMatCodeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsGrohe.dtMatCodeDataTable = New dsGrohe.dtMatCodeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsGrohe.dtMatCodeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsGrohe) As Integer
            Return Me.Adapter.Update(dataSet, "dtMatCode")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Material_ID As String, ByVal Original_Created As Date, ByVal Original_HS_Code As Long, ByVal Original_Description As String) As Integer
            If (Original_Material_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Material_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Material_ID,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Created,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_HS_Code,Long)
            If (Original_Description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Material_ID As String, ByVal Created As Date, ByVal HS_Code As Long, ByVal Description As String) As Integer
            If (Material_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Material_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Material_ID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Created,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(HS_Code,Long)
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Material_ID As String, ByVal Created As Date, ByVal HS_Code As Long, ByVal Description As String, ByVal Original_Material_ID As String, ByVal Original_Created As Date, ByVal Original_HS_Code As Long, ByVal Original_Description As String) As Integer
            If (Material_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Material_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Material_ID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Created,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(HS_Code,Long)
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Description,String)
            End If
            If (Original_Material_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Material_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Material_ID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Created,Date)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_HS_Code,Long)
            If (Original_Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Created As Date, ByVal HS_Code As Long, ByVal Description As String, ByVal Original_Material_ID As String, ByVal Original_Created As Date, ByVal Original_HS_Code As Long, ByVal Original_Description As String) As Integer
            Return Me.Update(Original_Material_ID, Created, HS_Code, Description, Original_Material_ID, Original_Created, Original_HS_Code, Original_Description)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sqlite_sequenceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sqlite_sequence"
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("seq", "seq")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""sqlite_sequence"" (""name"", ""seq"") VALUES (:name, :seq)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "seq"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "seq"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.Grohe_Phyto.My.MySettings.Default.conGrohe_Phyto
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT name, seq FROM ""main"".""sqlite_sequence"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsGrohe.sqlite_sequenceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsGrohe.sqlite_sequenceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsGrohe.sqlite_sequenceDataTable = New dsGrohe.sqlite_sequenceDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsGrohe.sqlite_sequenceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsGrohe) As Integer
            Return Me.Adapter.Update(dataSet, "sqlite_sequence")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal name As String, ByVal seq As String) As Integer
            If (name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(name,String)
            End If
            If (seq Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(seq,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TotalTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Total"
            tableMapping.ColumnMappings.Add("STT_NO", "STT_NO")
            tableMapping.ColumnMappings.Add("Archive_No", "Archive_No")
            tableMapping.ColumnMappings.Add("Origin", "Origin")
            tableMapping.ColumnMappings.Add("Material_ID", "Material_ID")
            tableMapping.ColumnMappings.Add("Material_No", "Material_No")
            tableMapping.ColumnMappings.Add("HS_Code", "HS_Code")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("Container_No", "Container_No")
            tableMapping.ColumnMappings.Add("chkPhytoDone", "chkPhytoDone")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.Grohe_Phyto.My.MySettings.Default.conGrohe_Phyto
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT STT_NO, Archive_No, Origin, Material_ID, Material_No, HS_Code, Description"& _ 
                ", Container_No, chkPhytoDone FROM ""main"".Total"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsGrohe.TotalDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsGrohe.TotalDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsGrohe.TotalDataTable = New dsGrohe.TotalDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _dsContainerTableAdapter As dsContainerTableAdapter
        
        Private _dsMaterialTableAdapter As dsMaterialTableAdapter
        
        Private _dsPhytoTableAdapter As dsPhytoTableAdapter
        
        Private _dsShipmentsTableAdapter As dsShipmentsTableAdapter
        
        Private _dtHSCodeTableAdapter As dtHSCodeTableAdapter
        
        Private _dtMatCodeTableAdapter As dtMatCodeTableAdapter
        
        Private _sqlite_sequenceTableAdapter As sqlite_sequenceTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dsContainerTableAdapter() As dsContainerTableAdapter
            Get
                Return Me._dsContainerTableAdapter
            End Get
            Set
                Me._dsContainerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dsMaterialTableAdapter() As dsMaterialTableAdapter
            Get
                Return Me._dsMaterialTableAdapter
            End Get
            Set
                Me._dsMaterialTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dsPhytoTableAdapter() As dsPhytoTableAdapter
            Get
                Return Me._dsPhytoTableAdapter
            End Get
            Set
                Me._dsPhytoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dsShipmentsTableAdapter() As dsShipmentsTableAdapter
            Get
                Return Me._dsShipmentsTableAdapter
            End Get
            Set
                Me._dsShipmentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dtHSCodeTableAdapter() As dtHSCodeTableAdapter
            Get
                Return Me._dtHSCodeTableAdapter
            End Get
            Set
                Me._dtHSCodeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dtMatCodeTableAdapter() As dtMatCodeTableAdapter
            Get
                Return Me._dtMatCodeTableAdapter
            End Get
            Set
                Me._dtMatCodeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property sqlite_sequenceTableAdapter() As sqlite_sequenceTableAdapter
            Get
                Return Me._sqlite_sequenceTableAdapter
            End Get
            Set
                Me._sqlite_sequenceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._dsContainerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dsContainerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dsContainerTableAdapter.Connection
                End If
                If ((Not (Me._dsMaterialTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dsMaterialTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dsMaterialTableAdapter.Connection
                End If
                If ((Not (Me._dsPhytoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dsPhytoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dsPhytoTableAdapter.Connection
                End If
                If ((Not (Me._dsShipmentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dsShipmentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dsShipmentsTableAdapter.Connection
                End If
                If ((Not (Me._dtHSCodeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dtHSCodeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dtHSCodeTableAdapter.Connection
                End If
                If ((Not (Me._dtMatCodeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dtMatCodeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dtMatCodeTableAdapter.Connection
                End If
                If ((Not (Me._sqlite_sequenceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sqlite_sequenceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sqlite_sequenceTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._dsContainerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dsMaterialTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dsPhytoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dsShipmentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dtHSCodeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dtMatCodeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dsGrohe, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dsShipmentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dsShipments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dsShipmentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dtHSCodeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtHSCode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dtHSCodeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dsContainerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dsContainer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dsContainerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dtMatCodeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dtMatCode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dtMatCodeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dsMaterialTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dsMaterial.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dsMaterialTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dsPhytoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dsPhyto.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dsPhytoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dsGrohe, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dsShipmentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dsShipments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dsShipmentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dtHSCodeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtHSCode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dtHSCodeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dsContainerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dsContainer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dsContainerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dtMatCodeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dtMatCode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dtMatCodeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dsMaterialTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dsMaterial.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dsMaterialTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dsPhytoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dsPhyto.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dsPhytoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dsGrohe, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dsPhytoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dsPhyto.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dsPhytoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dsMaterialTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dsMaterial.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dsMaterialTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dtMatCodeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtMatCode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dtMatCodeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dsContainerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dsContainer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dsContainerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dtHSCodeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dtHSCode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dtHSCodeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dsShipmentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dsShipments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dsShipmentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dsGrohe) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._dsContainerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dsContainerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus"& _ 
                        "s die gleiche Verbindungszeichenfolge verwendet werden.")
            End If
            If ((Not (Me._dsMaterialTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dsMaterialTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus"& _ 
                        "s die gleiche Verbindungszeichenfolge verwendet werden.")
            End If
            If ((Not (Me._dsPhytoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dsPhytoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus"& _ 
                        "s die gleiche Verbindungszeichenfolge verwendet werden.")
            End If
            If ((Not (Me._dsShipmentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dsShipmentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus"& _ 
                        "s die gleiche Verbindungszeichenfolge verwendet werden.")
            End If
            If ((Not (Me._dtHSCodeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dtHSCodeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus"& _ 
                        "s die gleiche Verbindungszeichenfolge verwendet werden.")
            End If
            If ((Not (Me._dtMatCodeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dtMatCodeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus"& _ 
                        "s die gleiche Verbindungszeichenfolge verwendet werden.")
            End If
            If ((Not (Me._sqlite_sequenceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sqlite_sequenceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus"& _ 
                        "s die gleiche Verbindungszeichenfolge verwendet werden.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager enthält keine Verbindungsinformationen. Legen Sie jede TableA"& _ 
                        "dapterManager TableAdapter-Eigenschaft auf eine gültige TableAdapter-Instanz fes"& _ 
                        "t.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("Die Transaktion kann nicht gestartet werden. Die aktuelle Datenverbindung unterst"& _ 
                        "ützt keine Transaktionen, oder der aktuelle Zustand lässt den Start der Transakt"& _ 
                        "ion nicht zu.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._dsContainerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dsContainerTableAdapter, Me._dsContainerTableAdapter.Connection)
                    Me._dsContainerTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dsContainerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._dsContainerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dsContainerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dsContainerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dsMaterialTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dsMaterialTableAdapter, Me._dsMaterialTableAdapter.Connection)
                    Me._dsMaterialTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dsMaterialTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._dsMaterialTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dsMaterialTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dsMaterialTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dsPhytoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dsPhytoTableAdapter, Me._dsPhytoTableAdapter.Connection)
                    Me._dsPhytoTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dsPhytoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._dsPhytoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dsPhytoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dsPhytoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dsShipmentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dsShipmentsTableAdapter, Me._dsShipmentsTableAdapter.Connection)
                    Me._dsShipmentsTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dsShipmentsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._dsShipmentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dsShipmentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dsShipmentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dtHSCodeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dtHSCodeTableAdapter, Me._dtHSCodeTableAdapter.Connection)
                    Me._dtHSCodeTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dtHSCodeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._dtHSCodeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dtHSCodeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dtHSCodeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dtMatCodeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dtMatCodeTableAdapter, Me._dtMatCodeTableAdapter.Connection)
                    Me._dtMatCodeTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dtMatCodeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._dtMatCodeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dtMatCodeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dtMatCodeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sqlite_sequenceTableAdapter, Me._sqlite_sequenceTableAdapter.Connection)
                    Me._sqlite_sequenceTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._sqlite_sequenceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._sqlite_sequenceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sqlite_sequenceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sqlite_sequenceTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._dsContainerTableAdapter) Is Nothing) Then
                    Me._dsContainerTableAdapter.Connection = CType(revertConnections(Me._dsContainerTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dsContainerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dsMaterialTableAdapter) Is Nothing) Then
                    Me._dsMaterialTableAdapter.Connection = CType(revertConnections(Me._dsMaterialTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dsMaterialTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dsPhytoTableAdapter) Is Nothing) Then
                    Me._dsPhytoTableAdapter.Connection = CType(revertConnections(Me._dsPhytoTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dsPhytoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dsShipmentsTableAdapter) Is Nothing) Then
                    Me._dsShipmentsTableAdapter.Connection = CType(revertConnections(Me._dsShipmentsTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dsShipmentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dtHSCodeTableAdapter) Is Nothing) Then
                    Me._dtHSCodeTableAdapter.Connection = CType(revertConnections(Me._dtHSCodeTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dtHSCodeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dtMatCodeTableAdapter) Is Nothing) Then
                    Me._dtMatCodeTableAdapter.Connection = CType(revertConnections(Me._dtMatCodeTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dtMatCodeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    Me._sqlite_sequenceTableAdapter.Connection = CType(revertConnections(Me._sqlite_sequenceTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._sqlite_sequenceTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
